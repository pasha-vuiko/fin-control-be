diff --git a/node_modules/drizzle-prisma-generator/index.js b/node_modules/drizzle-prisma-generator/index.js
index d8ecc2a..f9d6a0f 100755
--- a/node_modules/drizzle-prisma-generator/index.js
+++ b/node_modules/drizzle-prisma-generator/index.js
@@ -156,8 +156,7 @@ var getJoinIdType = (typeName, models) => {
     throw new Error("Could not find referenced model of many-to-many relation");
   }
   const idField = joinedModel.fields.find((f) => f.isId);
-  if (!idField)
-    throw new Error("No ID field on referenced model of many-to-many relation");
+  if (!idField) throw new Error("No ID field on referenced model of many-to-many relation");
   return idField.type;
 };
 var getJoinIdName = (typeName, models) => {
@@ -166,8 +165,7 @@ var getJoinIdName = (typeName, models) => {
     throw new Error("Could not find referenced model of many-to-many relation");
   }
   const idField = joinedModel.fields.find((f) => f.isId);
-  if (!idField)
-    throw new Error("No ID field on referenced model of many-to-many relation");
+  if (!idField) throw new Error("No ID field on referenced model of many-to-many relation");
   return idField.name;
 };
 var filterManyToManyRelationFields = (models) => {
@@ -181,8 +179,7 @@ var filterManyToManyRelationFields = (models) => {
 };
 var extractManyToManyModels = (models) => {
   const manyToManyFields = filterManyToManyRelationFields(models);
-  if (!manyToManyFields.length)
-    return [];
+  if (!manyToManyFields.length) return [];
   return generateModels(manyToManyFields, models, []);
 };
 
@@ -190,7 +187,7 @@ var extractManyToManyModels = (models) => {
 var import_generator_helper = require("@prisma/generator-helper");
 var mySqlImports = /* @__PURE__ */ new Set(["mysqlTable"]);
 var drizzleImports = /* @__PURE__ */ new Set([]);
-var prismaToDrizzleType = (type, colDbName, prismaEnum) => {
+var prismaToDrizzleType = (type, colDbName, prismaEnum, nativeType, nativeTypeAttributes) => {
   if (prismaEnum) {
     mySqlImports.add("mysqlEnum");
     return `mysqlEnum('${colDbName}', [${prismaEnum.values.map((val) => `'${val.dbName ?? val.name}'`).join(", ")}])`;
@@ -205,6 +202,11 @@ var prismaToDrizzleType = (type, colDbName, prismaEnum) => {
     case "bytes":
       throw new import_generator_helper.GeneratorError("Drizzle ORM doesn't support binary data type for MySQL");
     case "datetime":
+      if (nativeType === "Time") {
+        mySqlImports.add("time");
+        const precision = nativeTypeAttributes?.at(0) ?? "3";
+        return `time('${colDbName}', { precision: ${precision} })`;
+      }
       mySqlImports.add("datetime");
       return `datetime('${colDbName}', { fsp: 3 })`;
     case "decimal":
@@ -227,12 +229,9 @@ var prismaToDrizzleType = (type, colDbName, prismaEnum) => {
   }
 };
 var addColumnModifiers = (field, column) => {
-  if (field.isRequired)
-    column = column + `.notNull()`;
-  if (field.isId)
-    column = column + `.primaryKey()`;
-  if (field.isUnique)
-    column = column + `.unique()`;
+  if (field.isRequired) column = column + `.notNull()`;
+  if (field.isId) column = column + `.primaryKey()`;
+  if (field.isUnique) column = column + `.unique()`;
   if (field.default) {
     const defVal = field.default;
     switch (typeof defVal) {
@@ -261,7 +260,7 @@ var addColumnModifiers = (field, column) => {
           drizzleImports.add("sql");
           break;
         }
-        if (/^uuid\([0-9]*\)$/.test(value.name)) {
+        if (/^uuid\([0-9]*\)$/.test(value.name) || value.name === "uuid") {
           column = column + `.default(sql\`uuid()\`)`;
           drizzleImports.add("sql");
           break;
@@ -275,16 +274,17 @@ var addColumnModifiers = (field, column) => {
   }
   return column;
 };
-var prismaToDrizzleColumn = (field, enums) => {
+var prismaToDrizzleColumn = (field, enums, nativeType, nativeTypeAttributes) => {
   const colDbName = s(field.dbName ?? field.name);
   let column = `	${field.name}: `;
   const drizzleType = prismaToDrizzleType(
     field.type,
     colDbName,
-    field.kind === "enum" ? enums.find((e) => e.name === field.type) : void 0
+    field.kind === "enum" ? enums.find((e) => e.name === field.type) : void 0,
+    nativeType,
+    nativeTypeAttributes
   );
-  if (!drizzleType)
-    return void 0;
+  if (!drizzleType) return void 0;
   column = column + drizzleType;
   column = addColumnModifiers(field, column);
   return column;
@@ -299,13 +299,23 @@ var generateMySqlSchema = (options) => {
   for (const schemaTable of modelsWithImplicit) {
     const tableDbName = s(schemaTable.dbName ?? schemaTable.name);
     const columnFields = Object.fromEntries(
-      schemaTable.fields.map((e) => [e.name, prismaToDrizzleColumn(e, enums)]).filter((e) => e[1] !== void 0)
+      schemaTable.fields.map((field) => {
+        const [nativeType, nativeTypeAttributes = []] = field.nativeType ?? [];
+        return [
+          field.name,
+          prismaToDrizzleColumn(
+            field,
+            enums,
+            nativeType,
+            nativeTypeAttributes
+          )
+        ];
+      }).filter((field) => field.at(1) !== void 0)
     );
     const indexes = [];
     const relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);
     const relations = relFields.map((field) => {
-      if (!field?.relationFromFields?.length)
-        return void 0;
+      if (!field?.relationFromFields?.length) return void 0;
       const fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);
       let deleteAction;
       switch (field.relationOnDelete) {
@@ -363,8 +373,7 @@ ${Object.values(columnFields).join(",\n")}
 ${indexes.join(",\n")}
 })` : ""});`;
     tables.push(table);
-    if (!relFields.length)
-      continue;
+    if (!relFields.length) continue;
     drizzleImports.add("relations");
     const relationArgs = /* @__PURE__ */ new Set();
     const rqbFields = relFields.map((field) => {
@@ -389,10 +398,8 @@ ${rqbFields}
   const mySqlImportsArr = Array.from(mySqlImports.values()).sort((a, b) => a.localeCompare(b));
   const mySqlImportsStr = mySqlImportsArr.length ? `import { ${mySqlImportsArr.join(", ")} } from 'drizzle-orm/mysql-core'` : void 0;
   let importsStr = [drizzleImportsStr, mySqlImportsStr].filter((e) => e !== void 0).join("\n");
-  if (!importsStr.length)
-    importsStr = void 0;
-  const output = [importsStr, ...tables, ...rqb].filter((e) => e !== void 0).join("\n\n");
-  return output;
+  if (!importsStr.length) importsStr = void 0;
+  return [importsStr, ...tables, ...rqb].filter((e) => e !== void 0).join("\n\n");
 };
 
 // src/util/generators/pg.ts
@@ -400,7 +407,7 @@ var import_generator_helper2 = require("@prisma/generator-helper");
 var pgImports = /* @__PURE__ */ new Set();
 var drizzleImports2 = /* @__PURE__ */ new Set();
 pgImports.add("pgTable");
-var prismaToDrizzleType2 = (type, colDbName, defVal) => {
+var prismaToDrizzleType2 = (type, colDbName, defVal, nativeType, nativeTypeAttributes) => {
   switch (type.toLowerCase()) {
     case "bigint":
       pgImports.add("bigint");
@@ -411,15 +418,48 @@ var prismaToDrizzleType2 = (type, colDbName, defVal) => {
     case "bytes":
       throw new import_generator_helper2.GeneratorError("Drizzle ORM doesn't support binary data type for PostgreSQL");
     case "datetime":
+      if (nativeType === "Date") {
+        pgImports.add("date");
+        return `date('${colDbName}')`;
+      }
+      if (nativeType === "Time") {
+        pgImports.add("time");
+        const precision2 = nativeTypeAttributes?.[0] ?? "3";
+        return `time('${colDbName}', { precision: ${precision2} })`;
+      }
+      if (nativeType === "Timetz") {
+        const precision2 = nativeTypeAttributes?.[0] ?? "3";
+        return `time('${colDbName}', { precision: ${precision2}, withTimezone: true })`;
+      }
+      if (nativeType === "Timestamp") {
+        pgImports.add("timestamp");
+        const precision2 = nativeTypeAttributes?.[0] ?? "3";
+        return `timestamp('${colDbName}', { precision: ${precision2} })`;
+      }
+      if (nativeType === "Timestamptz") {
+        pgImports.add("timestamp");
+        const precision2 = nativeTypeAttributes?.[0] ?? "3";
+        return `timestamp('${colDbName}', { precision: ${precision2}, withTimezone: true })`;
+      }
       pgImports.add("timestamp");
       return `timestamp('${colDbName}', { precision: 3 })`;
     case "decimal":
       pgImports.add("decimal");
-      return `decimal('${colDbName}', { precision: 65, scale: 30 })`;
+      const precision = nativeTypeAttributes?.[0] ?? "65";
+      const scale = nativeTypeAttributes?.[1] ?? "30";
+      return `decimal('${colDbName}', { precision: ${precision}, scale: ${scale} })`;
     case "float":
       pgImports.add("doublePrecision");
       return `doublePrecision('${colDbName}')`;
     case "json":
+      if (nativeType === "Json") {
+        pgImports.add("json");
+        return `json('${colDbName}')`;
+      }
+      if (nativeType === "JsonB") {
+        pgImports.add("jsonb");
+        return `jsonb('${colDbName}')`;
+      }
       pgImports.add("jsonb");
       return `jsonb('${colDbName}')`;
     case "int":
@@ -437,14 +477,10 @@ var prismaToDrizzleType2 = (type, colDbName, defVal) => {
   }
 };
 var addColumnModifiers2 = (field, column) => {
-  if (field.isList)
-    column = column + `.array()`;
-  if (field.isRequired)
-    column = column + `.notNull()`;
-  if (field.isId)
-    column = column + `.primaryKey()`;
-  if (field.isUnique)
-    column = column + `.unique()`;
+  if (field.isList) column = column + `.array()`;
+  if (field.isRequired) column = column + `.notNull()`;
+  if (field.isId) column = column + `.primaryKey()`;
+  if (field.isUnique) column = column + `.unique()`;
   if (field.default) {
     const defVal = field.default;
     switch (typeof defVal) {
@@ -472,7 +508,7 @@ var addColumnModifiers2 = (field, column) => {
           drizzleImports2.add("sql");
           break;
         }
-        if (/^uuid\([0-9]*\)$/.test(value.name)) {
+        if (/^uuid\([0-9]*\)$/.test(value.name) || value.name === "uuid") {
           column = column + `.default(sql\`uuid()\`)`;
           drizzleImports2.add("sql");
           break;
@@ -486,16 +522,21 @@ var addColumnModifiers2 = (field, column) => {
   }
   return column;
 };
-var prismaToDrizzleColumn2 = (field) => {
+var prismaToDrizzleColumn2 = (field, nativeType, nativeTypeAttributes) => {
   const colDbName = s(field.dbName ?? field.name);
   let column = `	${field.name}: `;
   if (field.kind === "enum") {
     column = column + `${field.type}('${colDbName}')`;
   } else {
     const defVal = typeof field.default === "object" && !Array.isArray(field.default) ? field.default.name : void 0;
-    const drizzleType = prismaToDrizzleType2(field.type, colDbName, defVal);
-    if (!drizzleType)
-      return void 0;
+    const drizzleType = prismaToDrizzleType2(
+      field.type,
+      colDbName,
+      defVal,
+      nativeType,
+      nativeTypeAttributes
+    );
+    if (!drizzleType) return void 0;
     column = column + drizzleType;
   }
   column = addColumnModifiers2(field, column);
@@ -508,8 +549,7 @@ var generatePgSchema = (options) => {
   const modelsWithImplicit = [...clonedModels, ...manyToManyModels];
   const pgEnums = [];
   for (const schemaEnum of enums) {
-    if (!schemaEnum.values.length)
-      continue;
+    if (!schemaEnum.values.length) continue;
     const enumDbName = s(schemaEnum.dbName ?? schemaEnum.name);
     pgImports.add("pgEnum");
     pgEnums.push(
@@ -521,13 +561,22 @@ var generatePgSchema = (options) => {
   for (const schemaTable of modelsWithImplicit) {
     const tableDbName = s(schemaTable.dbName ?? schemaTable.name);
     const columnFields = Object.fromEntries(
-      schemaTable.fields.map((e) => [e.name, prismaToDrizzleColumn2(e)]).filter((e) => e[1] !== void 0)
+      schemaTable.fields.map((field) => {
+        const [nativeType, nativeTypeAttributes = []] = field.nativeType ?? [];
+        return [
+          field.name,
+          prismaToDrizzleColumn2(
+            field,
+            nativeType,
+            nativeTypeAttributes
+          )
+        ];
+      }).filter((field) => field.at(1) !== void 0)
     );
     const indexes = [];
     const relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);
     const relations = relFields.map((field) => {
-      if (!field?.relationFromFields?.length)
-        return void 0;
+      if (!field?.relationFromFields?.length) return void 0;
       const fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);
       let deleteAction;
       switch (field.relationOnDelete) {
@@ -585,8 +634,7 @@ ${Object.values(columnFields).join(",\n")}
 ${indexes.join(",\n")}
 })` : ""});`;
     tables.push(table);
-    if (!relFields.length)
-      continue;
+    if (!relFields.length) continue;
     drizzleImports2.add("relations");
     const relationArgs = /* @__PURE__ */ new Set();
     const rqbFields = relFields.map((field) => {
@@ -611,10 +659,8 @@ ${rqbFields}
   const pgImportsArr = Array.from(pgImports.values()).sort((a, b) => a.localeCompare(b));
   const pgImportsStr = pgImportsArr.length ? `import { ${pgImportsArr.join(", ")} } from 'drizzle-orm/pg-core'` : void 0;
   let importsStr = [drizzleImportsStr, pgImportsStr].filter((e) => e !== void 0).join("\n");
-  if (!importsStr.length)
-    importsStr = void 0;
-  const output = [importsStr, ...pgEnums, ...tables, ...rqb].filter((e) => e !== void 0).join("\n\n");
-  return output;
+  if (!importsStr.length) importsStr = void 0;
+  return [importsStr, ...pgEnums, ...tables, ...rqb].filter((e) => e !== void 0).join("\n\n");
 };
 
 // src/util/generators/sqlite.ts
@@ -655,12 +701,9 @@ var prismaToDrizzleType3 = (type, colDbName) => {
   }
 };
 var addColumnModifiers3 = (field, column) => {
-  if (field.isRequired)
-    column = column + `.notNull()`;
-  if (field.isId)
-    column = column + `.primaryKey()`;
-  if (field.isUnique)
-    column = column + `.unique()`;
+  if (field.isRequired) column = column + `.notNull()`;
+  if (field.isId) column = column + `.primaryKey()`;
+  if (field.isUnique) column = column + `.unique()`;
   if (field.default) {
     const defVal = field.default;
     switch (typeof defVal) {
@@ -688,7 +731,7 @@ var addColumnModifiers3 = (field, column) => {
           drizzleImports3.add("sql");
           break;
         }
-        if (/^uuid\([0-9]*\)$/.test(value.name)) {
+        if (/^uuid\([0-9]*\)$/.test(value.name) || value.name === "uuid") {
           column = column + `.default(sql\`uuid()\`)`;
           drizzleImports3.add("sql");
           break;
@@ -706,8 +749,7 @@ var prismaToDrizzleColumn3 = (field) => {
   const colDbName = s(field.dbName ?? field.name);
   let column = `	${field.name}: `;
   const drizzleType = prismaToDrizzleType3(field.type, colDbName);
-  if (!drizzleType)
-    return void 0;
+  if (!drizzleType) return void 0;
   column = column + drizzleType;
   column = addColumnModifiers3(field, column);
   return column;
@@ -727,8 +769,7 @@ var generateSQLiteSchema = (options) => {
     const indexes = [];
     const relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);
     const relations = relFields.map((field) => {
-      if (!field?.relationFromFields?.length)
-        return void 0;
+      if (!field?.relationFromFields?.length) return void 0;
       const fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);
       let deleteAction;
       switch (field.relationOnDelete) {
@@ -786,8 +827,7 @@ ${Object.values(columnFields).join(",\n")}
 ${indexes.join(",\n")}
 })` : ""});`;
     tables.push(table);
-    if (!relFields.length)
-      continue;
+    if (!relFields.length) continue;
     drizzleImports3.add("relations");
     const relationArgs = /* @__PURE__ */ new Set();
     const rqbFields = relFields.map((field) => {
@@ -812,8 +852,7 @@ ${rqbFields}
   const sqliteImportsArr = Array.from(sqliteImports.values()).sort((a, b) => a.localeCompare(b));
   const sqliteImportsStr = sqliteImportsArr.length ? `import { ${sqliteImportsArr.join(", ")} } from 'drizzle-orm/sqlite-core'` : void 0;
   let importsStr = [drizzleImportsStr, sqliteImportsStr].filter((e) => e !== void 0).join("\n");
-  if (!importsStr.length)
-    importsStr = void 0;
+  if (!importsStr.length) importsStr = void 0;
   const output = [importsStr, ...tables, ...rqb].filter((e) => e !== void 0).join("\n\n");
   return output;
 };
diff --git a/node_modules/drizzle-prisma-generator/index.js.map b/node_modules/drizzle-prisma-generator/index.js.map
index 77b8bb1..c77dee7 100644
--- a/node_modules/drizzle-prisma-generator/index.js.map
+++ b/node_modules/drizzle-prisma-generator/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../src/index.ts","../src/globals/index.ts","../package.json","../src/util/escape/index.ts","../src/util/extract-many-to-many-models/index.ts","../src/util/generators/mysql.ts","../src/util/generators/pg.ts","../src/util/generators/sqlite.ts","../src/util/recursive-write/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { defaultPath, generatorName } from '@/globals';\nimport { GeneratorError, generatorHandler } from '@prisma/generator-helper';\nimport path from 'path';\nimport { version } from '../package.json';\nimport { generateMySqlSchema, generatePgSchema, generateSQLiteSchema } from './util/generators';\nimport { recursiveWrite } from './util/recursive-write';\n\nexport const generator = generatorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tdefaultOutput: defaultPath,\n\t\t\tprettyName: generatorName,\n\t\t};\n\t},\n\tonGenerate: async (options) => {\n\t\tconst dbType = options.datasources[0]?.provider;\n\n\t\tlet output: string;\n\n\t\tswitch (dbType) {\n\t\t\tcase 'postgres':\n\t\t\tcase 'postgresql': {\n\t\t\t\toutput = generatePgSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'mysql': {\n\t\t\t\toutput = generateMySqlSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'sqlite': {\n\t\t\t\toutput = generateSQLiteSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase undefined:\n\t\t\t\tthrow new GeneratorError('Unable to determine database type.\\nMake sure datasource.provider is specified.');\n\n\t\t\tdefault:\n\t\t\t\tthrow new GeneratorError(\n\t\t\t\t\t`Invalid database type for Drizzle schema generation: ${dbType}.\\nSupported database types: PostgreSQL, MySQL, SQLite.`,\n\t\t\t\t);\n\t\t}\n\n\t\tconst folderPath = path.resolve(\n\t\t\toptions.generator.output?.value ?? (!!options.generator.output?.fromEnvVar\n\t\t\t\t? process.env[options.generator.output.fromEnvVar!] ?? defaultPath\n\t\t\t\t: defaultPath),\n\t\t);\n\n\t\tconst schemaPath = folderPath.endsWith('.ts')\n\t\t\t? folderPath\n\t\t\t: path.join(folderPath, '/schema.ts');\n\n\t\trecursiveWrite(schemaPath, output);\n\t},\n});\n\nexport default generator;\n","export const generatorName = 'Drizzle Prisma generator';\nexport const defaultPath = './src/drizzle/';\n","{\n\t\"name\": \"drizzle-prisma-generator\",\n\t\"author\": \"Drizzle Team\",\n\t\"version\": \"0.1.7\",\n\t\"description\": \"Generate Drizzle schema from Prisma schema\",\n\t\"scripts\": {\n\t\t\"run\": \"pnpm run build && cd ../prisma-testbench && npx prisma generate dev && code ./src/db/schema.ts\",\n\t\t\"build\": \"pnpm tsx scripts/build.ts\",\n\t\t\"b\": \"pnpm build\",\n\t\t\"pack\": \"(cd dist && npm pack --pack-destination ..) && rm -f package.tgz && mv *.tgz package.tgz\",\n\t\t\"publish\": \"npm publish package.tgz\",\n\t\t\"test\": \"vitest run\",\n\t\t\"lint\": \"dprint check --list-different\"\n\t},\n\t\"license\": \"Apache-2.0\",\n\t\"devDependencies\": {\n\t\t\"@arethetypeswrong/cli\": \"^0.15.3\",\n\t\t\"@types/node\": \"^20.12.7\",\n\t\t\"dprint\": \"^0.45.1\",\n\t\t\"prisma\": \"^5.12.1\",\n\t\t\"tsup\": \"^8.0.2\",\n\t\t\"tsx\": \"^4.7.2\",\n\t\t\"typescript\": \"^5.4.5\",\n\t\t\"zx\": \"^8.0.2\"\n\t},\n\t\"keywords\": [\n\t\t\"drizzle\",\n\t\t\"prisma\",\n\t\t\"orm\",\n\t\t\"pg\",\n\t\t\"mysql\",\n\t\t\"postgresql\",\n\t\t\"postgres\",\n\t\t\"sqlite\",\n\t\t\"database\",\n\t\t\"sql\",\n\t\t\"typescript\",\n\t\t\"ts\",\n\t\t\"schema\"\n\t],\n\t\"bin\": \"./index.js\",\n\t\"main\": \"./index.js\",\n\t\"sideEffects\": false,\n\t\"publishConfig\": {\n\t\t\"provenance\": true\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/drizzle-team/drizzle-prisma-generator.git\"\n\t},\n\t\"homepage\": \"https://github.com/drizzle-team/drizzle-prisma-generator\",\n\t\"dependencies\": {\n\t\t\"@prisma/generator-helper\": \"^5.14.0\"\n\t}\n}\n","export type StringContainer = \"'\" | '`' | '\"';\n\nconst backslashes = new RegExp(/\\\\/g);\n\nexport const s = (src: string, container: StringContainer = \"'\") =>\n\tsrc.replace(backslashes, '\\\\\\\\').replace(new RegExp(container, 'g'), `\\\\${container}`);\n","import type { DMMF } from '@prisma/generator-helper';\nimport { UnReadonlyDeep } from '../un-readonly-deep';\n\n/*\nCredit where credit is due:\n\nThis is heavily borrowed from prisma-kysely\nhttps://github.com/valtyr/prisma-kysely/blob/main/src/helpers/generateImplicitManyToManyModels.ts\n\nwhere it was heavily borrowed from prisma-dbml-generator\nhttps://github.com/notiz-dev/prisma-dbml-generator/blob/752f89cf40257a9698913294b38843ac742f8345/src/generator/many-to-many-tables.ts\n*/\n\nconst sorted = <T>(list: T[], sortFunction?: (a: T, b: T) => number) => {\n\tconst newList = [...list];\n\tnewList.sort(sortFunction);\n\treturn newList;\n};\n\nconst generateModels = (\n\tmanyToManyFields: DMMF.Field[],\n\tmodels: DMMF.Model[],\n\tmanyToManyTables: DMMF.Model[] = [],\n): DMMF.Model[] => {\n\tconst manyFirst = manyToManyFields.shift();\n\tif (!manyFirst) {\n\t\treturn manyToManyTables;\n\t}\n\n\tconst manySecond = manyToManyFields.find((field) => field.relationName === manyFirst.relationName);\n\n\tif (!manySecond) {\n\t\treturn manyToManyTables;\n\t}\n\n\tmanyToManyTables.push({\n\t\tdbName: `_${manyFirst.relationName}`,\n\t\tname: manyFirst.relationName || '',\n\t\tprimaryKey: null,\n\t\tuniqueFields: [],\n\t\tuniqueIndexes: [],\n\t\tfields: generateJoinFields([manyFirst, manySecond], models),\n\t});\n\n\treturn generateModels(\n\t\tmanyToManyFields.filter((field) => field.relationName !== manyFirst.relationName),\n\t\tmodels,\n\t\tmanyToManyTables,\n\t);\n};\n\nconst generateJoinFields = (fields: [DMMF.Field, DMMF.Field], models: DMMF.Model[]): DMMF.Field[] => {\n\tconst [A, B] = sorted(fields, (a, b) => a.type.localeCompare(b.type)) as UnReadonlyDeep<[DMMF.Field, DMMF.Field]>;\n\n\tconst aTableName = B.type;\n\tconst bTableName = A.type;\n\n\tconst manyTableName = `${A.type}To${B.type}`;\n\n\tA.isList = true;\n\tA.type = `${bTableName}To${aTableName}`;\n\tA.relationName = `${aTableName}To${manyTableName}`;\n\tA.relationFromFields = [];\n\tA.relationToFields = [];\n\n\tB.isList = true;\n\tB.type = `${bTableName}To${aTableName}`;\n\tB.relationName = `${bTableName}To${manyTableName}`;\n\tA.relationFromFields = [];\n\tA.relationToFields = [];\n\n\treturn [\n\t\t{\n\t\t\tname: `${aTableName}Id`,\n\t\t\tdbName: 'A',\n\t\t\ttype: getJoinIdType(aTableName, models),\n\t\t\tkind: 'scalar',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t},\n\t\t{\n\t\t\tname: aTableName,\n\t\t\ttype: aTableName,\n\t\t\tkind: 'object',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t\trelationName: `${aTableName}To${manyTableName}`,\n\t\t\trelationFromFields: [`${aTableName}Id`],\n\t\t\trelationToFields: [getJoinIdName(aTableName, models)],\n\t\t},\n\t\t{\n\t\t\tname: `${bTableName}Id`,\n\t\t\tdbName: 'B',\n\t\t\ttype: getJoinIdType(bTableName, models),\n\t\t\tkind: 'scalar',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t},\n\t\t{\n\t\t\tname: bTableName,\n\t\t\ttype: bTableName,\n\t\t\tkind: 'object',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t\trelationName: `${bTableName}To${manyTableName}`,\n\t\t\trelationFromFields: [`${bTableName}Id`],\n\t\t\trelationToFields: [getJoinIdName(bTableName, models)],\n\t\t},\n\t];\n};\n\nconst getJoinIdType = (typeName: string, models: DMMF.Model[]): string => {\n\tconst joinedModel = models.find((m) => m.name === typeName);\n\tif (!joinedModel) {\n\t\tthrow new Error('Could not find referenced model of many-to-many relation');\n\t}\n\n\tconst idField = joinedModel.fields.find((f) => f.isId);\n\tif (!idField) throw new Error('No ID field on referenced model of many-to-many relation');\n\n\treturn idField.type;\n};\n\nconst getJoinIdName = (typeName: string, models: DMMF.Model[]): string => {\n\tconst joinedModel = models.find((m) => m.name === typeName);\n\tif (!joinedModel) {\n\t\tthrow new Error('Could not find referenced model of many-to-many relation');\n\t}\n\n\tconst idField = joinedModel.fields.find((f) => f.isId);\n\tif (!idField) throw new Error('No ID field on referenced model of many-to-many relation');\n\n\treturn idField.name;\n};\n\nconst filterManyToManyRelationFields = (models: DMMF.Model[]) => {\n\tconst fields = models.flatMap((model) => model.fields);\n\n\tconst relationFields = fields.filter(\n\t\t(field): field is DMMF.Field & Required<Pick<DMMF.Field, 'relationName'>> => !!field.relationName,\n\t);\n\n\tconst nonManyToManyRelationNames = relationFields\n\t\t.filter((field) => !field.isList)\n\t\t.map((field) => field.relationName);\n\n\tconst notManyToMany = new Set<string>(nonManyToManyRelationNames);\n\n\treturn relationFields.filter((field) => !notManyToMany.has(field.relationName));\n};\n\nexport const extractManyToManyModels = (models: DMMF.Model[]): DMMF.Model[] => {\n\tconst manyToManyFields = filterManyToManyRelationFields(models);\n\n\tif (!manyToManyFields.length) return [];\n\n\treturn generateModels(manyToManyFields, models, []);\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst mySqlImports = new Set<string>(['mysqlTable']);\nconst drizzleImports = new Set<string>([]);\n\nconst prismaToDrizzleType = (type: string, colDbName: string, prismaEnum?: UnReadonlyDeep<DMMF.DatamodelEnum>) => {\n\tif (prismaEnum) {\n\t\tmySqlImports.add('mysqlEnum');\n\t\treturn `mysqlEnum('${colDbName}', [${prismaEnum.values.map((val) => `'${val.dbName ?? val.name}'`).join(', ')}])`;\n\t}\n\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tmySqlImports.add('bigint');\n\t\t\treturn `bigint('${colDbName}', { mode: 'bigint' })`;\n\t\tcase 'boolean':\n\t\t\tmySqlImports.add('boolean');\n\t\t\treturn `boolean('${colDbName}')`;\n\t\tcase 'bytes':\n\t\t\t// Drizzle doesn't support it yet...\n\t\t\tthrow new GeneratorError(\"Drizzle ORM doesn't support binary data type for MySQL\");\n\t\tcase 'datetime':\n\t\t\tmySqlImports.add('datetime');\n\t\t\treturn `datetime('${colDbName}', { fsp: 3 })`;\n\t\tcase 'decimal':\n\t\t\tmySqlImports.add('decimal');\n\t\t\treturn `decimal('${colDbName}', { precision: 65, scale: 30 })`;\n\t\tcase 'float':\n\t\t\tmySqlImports.add('double');\n\t\t\treturn `double('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tmySqlImports.add('json');\n\t\t\treturn `json('${colDbName}')`;\n\t\tcase 'int':\n\t\t\tmySqlImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tmySqlImports.add('varchar');\n\t\t\treturn `varchar('${colDbName}', { length: 191 })`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`CURRENT_TIMESTAMP\\`)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tcolumn = column + `.autoincrement()`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n\tenums: UnReadonlyDeep<DMMF.DatamodelEnum[]>,\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tconst drizzleType = prismaToDrizzleType(\n\t\tfield.type,\n\t\tcolDbName,\n\t\tfield.kind === 'enum' ? enums.find((e) => e.name === field.type)! : undefined,\n\t);\n\tif (!drizzleType) return undefined;\n\n\tcolumn = column + drizzleType;\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generateMySqlSchema = (options: GeneratorOptions) => {\n\tconst { models, enums } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((e) => [e.name, prismaToDrizzleColumn(e, enums as UnReadonlyDeep<typeof enums>)])\n\t\t\t\t.filter((e) => e[1] !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tmySqlImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tmySqlImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tmySqlImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\t\tconst table = `export const ${schemaTable.name} = mysqlTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst mySqlImportsArr = Array.from(mySqlImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst mySqlImportsStr = mySqlImportsArr.length\n\t\t? `import { ${mySqlImportsArr.join(', ')} } from 'drizzle-orm/mysql-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, mySqlImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\tconst output = [importsStr, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n\n\treturn output;\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst pgImports = new Set<string>();\nconst drizzleImports = new Set<string>();\npgImports.add('pgTable');\n\nconst prismaToDrizzleType = (type: string, colDbName: string, defVal?: string) => {\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tpgImports.add('bigint');\n\t\t\treturn `bigint('${colDbName}', { mode: 'bigint' })`;\n\t\tcase 'boolean':\n\t\t\tpgImports.add('boolean');\n\t\t\treturn `boolean('${colDbName}')`;\n\t\tcase 'bytes':\n\t\t\t// Drizzle doesn't support it yet...\n\t\t\tthrow new GeneratorError(\"Drizzle ORM doesn't support binary data type for PostgreSQL\");\n\t\tcase 'datetime':\n\t\t\tpgImports.add('timestamp');\n\t\t\treturn `timestamp('${colDbName}', { precision: 3 })`;\n\t\tcase 'decimal':\n\t\t\tpgImports.add('decimal');\n\t\t\treturn `decimal('${colDbName}', { precision: 65, scale: 30 })`;\n\t\tcase 'float':\n\t\t\tpgImports.add('doublePrecision');\n\t\t\treturn `doublePrecision('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tpgImports.add('jsonb');\n\t\t\treturn `jsonb('${colDbName}')`;\n\t\tcase 'int':\n\t\t\tif (defVal === 'autoincrement') {\n\t\t\t\tpgImports.add('serial');\n\t\t\t\treturn `serial('${colDbName}')`;\n\t\t\t}\n\n\t\t\tpgImports.add('integer');\n\t\t\treturn `integer('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tpgImports.add('text');\n\t\t\treturn `text('${colDbName}')`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isList) column = column + `.array()`;\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.defaultNow()`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tif (field.kind === 'enum') {\n\t\tcolumn = column + `${field.type}('${colDbName}')`;\n\t} else {\n\t\tconst defVal = typeof field.default === 'object' && !Array.isArray(field.default)\n\t\t\t? (field.default as { name: string }).name\n\t\t\t: undefined;\n\n\t\tconst drizzleType = prismaToDrizzleType(field.type, colDbName, defVal);\n\t\tif (!drizzleType) return undefined;\n\n\t\tcolumn = column + drizzleType;\n\t}\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generatePgSchema = (options: GeneratorOptions) => {\n\tconst { models, enums } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst pgEnums: string[] = [];\n\n\tfor (const schemaEnum of enums) {\n\t\tif (!schemaEnum.values.length) continue;\n\t\tconst enumDbName = s(schemaEnum.dbName ?? schemaEnum.name);\n\n\t\tpgImports.add('pgEnum');\n\n\t\tpgEnums.push(\n\t\t\t`export const ${schemaEnum.name} = pgEnum('${enumDbName}', [${\n\t\t\t\tschemaEnum.values.map((e) => `'${e.dbName ?? e.name}'`).join(', ')\n\t\t\t}])`,\n\t\t);\n\t}\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((e) => [e.name, prismaToDrizzleColumn(e)])\n\t\t\t\t.filter((e) => e[1] !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tpgImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tpgImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tpgImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\n\t\tconst table = `export const ${schemaTable.name} = pgTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst pgImportsArr = Array.from(pgImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst pgImportsStr = pgImportsArr.length\n\t\t? `import { ${pgImportsArr.join(', ')} } from 'drizzle-orm/pg-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, pgImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\tconst output = [importsStr, ...pgEnums, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n\n\treturn output;\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst sqliteImports = new Set<string>(['sqliteTable']);\nconst drizzleImports = new Set<string>([]);\n\nconst prismaToDrizzleType = (type: string, colDbName: string) => {\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'boolean':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}', { mode: 'boolean' })`;\n\t\tcase 'bytes':\n\t\t\tsqliteImports.add('blob');\n\t\t\treturn `blob('${colDbName}', { mode: 'buffer' })`;\n\t\tcase 'datetime':\n\t\t\tsqliteImports.add('numeric');\n\t\t\treturn `numeric('${colDbName}')`;\n\t\tcase 'decimal':\n\t\t\tsqliteImports.add('numeric');\n\t\t\treturn `numeric('${colDbName}')`;\n\t\tcase 'float':\n\t\t\tsqliteImports.add('real');\n\t\t\treturn `real('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tsqliteImports.add('text');\n\t\t\treturn `text('${colDbName}', { mode: 'json' })`;\n\t\tcase 'int':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tsqliteImports.add('text');\n\t\t\treturn `text('${colDbName}')`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`DATE('now')\\`)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tconst drizzleType = prismaToDrizzleType(field.type, colDbName);\n\tif (!drizzleType) return undefined;\n\n\tcolumn = column + drizzleType;\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generateSQLiteSchema = (options: GeneratorOptions) => {\n\tconst { models } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((e) => [e.name, prismaToDrizzleColumn(e)])\n\t\t\t\t.filter((e) => e[1] !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tsqliteImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tsqliteImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tsqliteImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\n\t\tconst table = `export const ${schemaTable.name} = sqliteTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst sqliteImportsArr = Array.from(sqliteImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst sqliteImportsStr = sqliteImportsArr.length\n\t\t? `import { ${sqliteImportsArr.join(', ')} } from 'drizzle-orm/sqlite-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, sqliteImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\tconst output = [importsStr, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n\n\treturn output;\n};\n","import fs from 'fs';\nimport pathLib from 'path';\n\nexport const recursiveWrite = async (\n\tpath: string,\n\tcontent: string,\n) => {\n\tfs.mkdirSync(pathLib.dirname(path), {\n\t\trecursive: true,\n\t});\n\n\tfs.writeFileSync(path, content);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,IAAM,gBAAgB;AACtB,IAAM,cAAc;;;ADC3B,IAAAA,2BAAiD;AACjD,IAAAC,eAAiB;;;AEAhB,cAAW;;;ACDZ,IAAM,cAAc,IAAI,OAAO,KAAK;AAE7B,IAAM,IAAI,CAAC,KAAa,YAA6B,QAC3D,IAAI,QAAQ,aAAa,MAAM,EAAE,QAAQ,IAAI,OAAO,WAAW,GAAG,GAAG,KAAK,SAAS,EAAE;;;ACQtF,IAAM,SAAS,CAAI,MAAW,iBAA0C;AACvE,QAAM,UAAU,CAAC,GAAG,IAAI;AACxB,UAAQ,KAAK,YAAY;AACzB,SAAO;AACR;AAEA,IAAM,iBAAiB,CACtB,kBACA,QACA,mBAAiC,CAAC,MAChB;AAClB,QAAM,YAAY,iBAAiB,MAAM;AACzC,MAAI,CAAC,WAAW;AACf,WAAO;AAAA,EACR;AAEA,QAAM,aAAa,iBAAiB,KAAK,CAAC,UAAU,MAAM,iBAAiB,UAAU,YAAY;AAEjG,MAAI,CAAC,YAAY;AAChB,WAAO;AAAA,EACR;AAEA,mBAAiB,KAAK;AAAA,IACrB,QAAQ,IAAI,UAAU,YAAY;AAAA,IAClC,MAAM,UAAU,gBAAgB;AAAA,IAChC,YAAY;AAAA,IACZ,cAAc,CAAC;AAAA,IACf,eAAe,CAAC;AAAA,IAChB,QAAQ,mBAAmB,CAAC,WAAW,UAAU,GAAG,MAAM;AAAA,EAC3D,CAAC;AAED,SAAO;AAAA,IACN,iBAAiB,OAAO,CAAC,UAAU,MAAM,iBAAiB,UAAU,YAAY;AAAA,IAChF;AAAA,IACA;AAAA,EACD;AACD;AAEA,IAAM,qBAAqB,CAAC,QAAkC,WAAuC;AACpG,QAAM,CAAC,GAAG,CAAC,IAAI,OAAO,QAAQ,CAAC,GAAG,MAAM,EAAE,KAAK,cAAc,EAAE,IAAI,CAAC;AAEpE,QAAM,aAAa,EAAE;AACrB,QAAM,aAAa,EAAE;AAErB,QAAM,gBAAgB,GAAG,EAAE,IAAI,KAAK,EAAE,IAAI;AAE1C,IAAE,SAAS;AACX,IAAE,OAAO,GAAG,UAAU,KAAK,UAAU;AACrC,IAAE,eAAe,GAAG,UAAU,KAAK,aAAa;AAChD,IAAE,qBAAqB,CAAC;AACxB,IAAE,mBAAmB,CAAC;AAEtB,IAAE,SAAS;AACX,IAAE,OAAO,GAAG,UAAU,KAAK,UAAU;AACrC,IAAE,eAAe,GAAG,UAAU,KAAK,aAAa;AAChD,IAAE,qBAAqB,CAAC;AACxB,IAAE,mBAAmB,CAAC;AAEtB,SAAO;AAAA,IACN;AAAA,MACC,MAAM,GAAG,UAAU;AAAA,MACnB,QAAQ;AAAA,MACR,MAAM,cAAc,YAAY,MAAM;AAAA,MACtC,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,iBAAiB;AAAA,IAClB;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,iBAAiB;AAAA,MACjB,cAAc,GAAG,UAAU,KAAK,aAAa;AAAA,MAC7C,oBAAoB,CAAC,GAAG,UAAU,IAAI;AAAA,MACtC,kBAAkB,CAAC,cAAc,YAAY,MAAM,CAAC;AAAA,IACrD;AAAA,IACA;AAAA,MACC,MAAM,GAAG,UAAU;AAAA,MACnB,QAAQ;AAAA,MACR,MAAM,cAAc,YAAY,MAAM;AAAA,MACtC,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,iBAAiB;AAAA,IAClB;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,iBAAiB;AAAA,MACjB,cAAc,GAAG,UAAU,KAAK,aAAa;AAAA,MAC7C,oBAAoB,CAAC,GAAG,UAAU,IAAI;AAAA,MACtC,kBAAkB,CAAC,cAAc,YAAY,MAAM,CAAC;AAAA,IACrD;AAAA,EACD;AACD;AAEA,IAAM,gBAAgB,CAAC,UAAkB,WAAiC;AACzE,QAAM,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ;AAC1D,MAAI,CAAC,aAAa;AACjB,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC3E;AAEA,QAAM,UAAU,YAAY,OAAO,KAAK,CAAC,MAAM,EAAE,IAAI;AACrD,MAAI,CAAC;AAAS,UAAM,IAAI,MAAM,0DAA0D;AAExF,SAAO,QAAQ;AAChB;AAEA,IAAM,gBAAgB,CAAC,UAAkB,WAAiC;AACzE,QAAM,cAAc,OAAO,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ;AAC1D,MAAI,CAAC,aAAa;AACjB,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC3E;AAEA,QAAM,UAAU,YAAY,OAAO,KAAK,CAAC,MAAM,EAAE,IAAI;AACrD,MAAI,CAAC;AAAS,UAAM,IAAI,MAAM,0DAA0D;AAExF,SAAO,QAAQ;AAChB;AAEA,IAAM,iCAAiC,CAAC,WAAyB;AAChE,QAAM,SAAS,OAAO,QAAQ,CAAC,UAAU,MAAM,MAAM;AAErD,QAAM,iBAAiB,OAAO;AAAA,IAC7B,CAAC,UAA4E,CAAC,CAAC,MAAM;AAAA,EACtF;AAEA,QAAM,6BAA6B,eACjC,OAAO,CAAC,UAAU,CAAC,MAAM,MAAM,EAC/B,IAAI,CAAC,UAAU,MAAM,YAAY;AAEnC,QAAM,gBAAgB,IAAI,IAAY,0BAA0B;AAEhE,SAAO,eAAe,OAAO,CAAC,UAAU,CAAC,cAAc,IAAI,MAAM,YAAY,CAAC;AAC/E;AAEO,IAAM,0BAA0B,CAAC,WAAuC;AAC9E,QAAM,mBAAmB,+BAA+B,MAAM;AAE9D,MAAI,CAAC,iBAAiB;AAAQ,WAAO,CAAC;AAEtC,SAAO,eAAe,kBAAkB,QAAQ,CAAC,CAAC;AACnD;;;AC1KA,8BAAiE;AAEjE,IAAM,eAAe,oBAAI,IAAY,CAAC,YAAY,CAAC;AACnD,IAAM,iBAAiB,oBAAI,IAAY,CAAC,CAAC;AAEzC,IAAM,sBAAsB,CAAC,MAAc,WAAmB,eAAoD;AACjH,MAAI,YAAY;AACf,iBAAa,IAAI,WAAW;AAC5B,WAAO,cAAc,SAAS,OAAO,WAAW,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,UAAU,IAAI,IAAI,GAAG,EAAE,KAAK,IAAI,CAAC;AAAA,EAC9G;AAEA,UAAQ,KAAK,YAAY,GAAG;AAAA,IAC3B,KAAK;AACJ,mBAAa,IAAI,QAAQ;AACzB,aAAO,WAAW,SAAS;AAAA,IAC5B,KAAK;AACJ,mBAAa,IAAI,SAAS;AAC1B,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AAEJ,YAAM,IAAI,uCAAe,wDAAwD;AAAA,IAClF,KAAK;AACJ,mBAAa,IAAI,UAAU;AAC3B,aAAO,aAAa,SAAS;AAAA,IAC9B,KAAK;AACJ,mBAAa,IAAI,SAAS;AAC1B,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AACJ,mBAAa,IAAI,QAAQ;AACzB,aAAO,WAAW,SAAS;AAAA,IAC5B,KAAK;AACJ,mBAAa,IAAI,MAAM;AACvB,aAAO,SAAS,SAAS;AAAA,IAC1B,KAAK;AACJ,mBAAa,IAAI,KAAK;AACtB,aAAO,QAAQ,SAAS;AAAA,IACzB,KAAK;AACJ,mBAAa,IAAI,SAAS;AAC1B,aAAO,YAAY,SAAS;AAAA,IAC7B;AACC,aAAO;AAAA,EACT;AACD;AAEA,IAAM,qBAAqB,CAAC,OAAmB,WAAmB;AACjE,MAAI,MAAM;AAAY,aAAS,SAAS;AACxC,MAAI,MAAM;AAAM,aAAS,SAAS;AAClC,MAAI,MAAM;AAAU,aAAS,SAAS;AAEtC,MAAI,MAAM,SAAS;AAClB,UAAM,SAAS,MAAM;AAErB,YAAQ,OAAO,QAAQ;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,iBAAS,SAAS,YAAY,KAAK,UAAU,MAAM,CAAC;AACpD;AAAA,MACD,KAAK;AACJ,YAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,mBAAS,SAAS,aAAa,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AAC9E;AAAA,QACD;AAEA,cAAM,QAAQ;AAKd,YAAI,MAAM,SAAS,OAAO;AACzB,mBAAS,SAAS;AAClB;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,iBAAiB;AACnC,mBAAS,SAAS;AAClB;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,eAAe;AACjC,mBAAS,SAAS,iBAAiB,EAAE,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC;AAExD,yBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,YAAI,mBAAmB,KAAK,MAAM,IAAI,GAAG;AACxC,mBAAS,SAAS;AAElB,yBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,cAAM,cAAc,GAAG,MAAM,IAAI,GAChC,MAAM,KAAK,SACR,MAAM,MAAM,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,MACpD,MAAM,KAAK,SAAS,GAAG,IACvB,KACA,IACJ;AACA,cAAM,SAAS,QAAQ,EAAE,aAAa,GAAG,CAAC;AAE1C,uBAAe,IAAI,KAAK;AACxB,iBAAS,SAAS,YAAY,MAAM;AACpC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;AAEA,IAAM,wBAAwB,CAC7B,OACA,UACwB;AACxB,QAAM,YAAY,EAAE,MAAM,UAAU,MAAM,IAAI;AAC9C,MAAI,SAAS,IAAK,MAAM,IAAI;AAE5B,QAAM,cAAc;AAAA,IACnB,MAAM;AAAA,IACN;AAAA,IACA,MAAM,SAAS,SAAS,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM,IAAI,IAAK;AAAA,EACrE;AACA,MAAI,CAAC;AAAa,WAAO;AAEzB,WAAS,SAAS;AAElB,WAAS,mBAAmB,OAAO,MAAM;AAEzC,SAAO;AACR;AAEO,IAAM,sBAAsB,CAAC,YAA8B;AACjE,QAAM,EAAE,QAAQ,MAAM,IAAI,QAAQ,KAAK;AACvC,QAAM,eAAe,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAEtD,QAAM,mBAAmB,wBAAwB,YAAY;AAE7D,QAAM,qBAAqB,CAAC,GAAG,cAAc,GAAG,gBAAgB;AAEhE,QAAM,SAAmB,CAAC;AAC1B,QAAM,MAAgB,CAAC;AAEvB,aAAW,eAAe,oBAAoB;AAC7C,UAAM,cAAc,EAAE,YAAY,UAAU,YAAY,IAAI;AAE5D,UAAM,eAAe,OAAO;AAAA,MAC3B,YAAY,OACV,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,sBAAsB,GAAG,KAAqC,CAAC,CAAC,EACpF,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,MAAS;AAAA,IACnC;AAEA,UAAM,UAAoB,CAAC;AAE3B,UAAM,YAAY,YAAY,OAAO,OAAO,CAAC,UAAU,MAAM,oBAAoB,MAAM,kBAAkB;AACzG,UAAM,YAAY,UAAU,IAAwB,CAAC,UAAU;AAC9D,UAAI,CAAC,OAAO,oBAAoB;AAAQ,eAAO;AAE/C,YAAM,WAAW,EAAE,GAAG,YAAY,UAAU,YAAY,IAAI,IAAI,MAAM,UAAU,MAAM,IAAI,OAAO;AACjG,UAAI;AACJ,cAAQ,MAAM,kBAAkB;AAAA,QAC/B,KAAK;AAAA,QACL,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD;AACC,gBAAM,IAAI,uCAAe,qCAAqC,QAAQ,KAAK,MAAM,gBAAgB,EAAE;AAAA,MACrG;AAEA,mBAAa,IAAI,YAAY;AAE7B,aAAO,KAAM,QAAQ;AAAA,WAA+B,QAAQ;AAAA,cAC3D,MAAM,mBAAmB,IAAI,CAAC,QAAQ,GAAG,YAAY,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAC9E;AAAA,qBAA4B,MAAM,iBAAkB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,KAClG,gBAAgB,iBAAiB,cAAc;AAAA,eAAoB,YAAY,OAAO,EACvF;AAAA;AAAA,IACD,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS;AAEhC,YAAQ,KAAK,GAAG,SAAS;AAEzB,QAAI,YAAY,cAAc,QAAQ;AACrC,mBAAa,IAAI,aAAa;AAE9B,YAAM,UAAU,YAAY,cAAc,IAAI,CAAC,QAAQ;AACtD,cAAM,UAAU,EAAE,IAAI,QAAQ,GAAG,YAAY,IAAI,IAAI,IAAI,OAAO,KAAK,GAAG,CAAC,MAAM;AAG/E,eAAO,KACN,IAAI,OAAO,UAAU,GAAG,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,CAAC,aAC7D,mBAAmB,OAAO;AAAA,QAAe,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,MACtG,CAAC;AAED,cAAQ,KAAK,GAAG,OAAO;AAAA,IACxB;AAEA,QAAI,YAAY,YAAY;AAC3B,mBAAa,IAAI,YAAY;AAE7B,YAAM,KAAK,YAAY;AACvB,YAAM,SAAS,EAAE,GAAG,QAAQ,GAAG,YAAY,IAAI,MAAM;AAErD,YAAM,UAAU,KAAM,MAAM;AAAA,WAA+B,MAAM;AAAA,cAChE,GAAG,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC3D;AAAA;AAEA,cAAQ,KAAK,OAAO;AAAA,IACrB;AACA,UAAM,QAAQ,gBAAgB,YAAY,IAAI,kBAAkB,WAAW;AAAA,EAC1E,OAAO,OAAO,YAAY,EAAE,KAAK,KAAK,CACvC;AAAA,GAAM,QAAQ,SAAS,MAAM,YAAY,IAAI;AAAA,EAAY,QAAQ,KAAK,KAAK,CAAC;AAAA,MAAS,EAAE;AAEvF,WAAO,KAAK,KAAK;AAEjB,QAAI,CAAC,UAAU;AAAQ;AACvB,mBAAe,IAAI,WAAW;AAE9B,UAAM,eAAe,oBAAI,IAAY;AACrC,UAAM,YAAY,UAAU,IAAI,CAAC,UAAU;AAC1C,mBAAa,IAAI,MAAM,oBAAoB,SAAS,QAAQ,MAAM;AAClE,YAAM,UAAU,EAAE,MAAM,gBAAgB,EAAE;AAE1C,aAAO,IAAK,MAAM,IAAI,KACrB,MAAM,oBAAoB,SACvB,OAAO,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,aACpD,MAAM,mBAAmB,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC1E;AAAA,iBAAwB,MAAM,iBAAkB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,OACzF,QAAQ,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,IACxD;AAAA,IACD,CAAC,EAAE,KAAK,KAAK;AAEb,UAAM,YAAY,MAAM,KAAK,aAAa,OAAO,CAAC,EAAE,KAAK,IAAI;AAE7D,UAAM,cACL,gBAAgB,YAAY,IAAI,yBAAyB,YAAY,IAAI,QAAQ,SAAS;AAAA,EAAc,SAAS;AAAA;AAElH,QAAI,KAAK,WAAW;AAAA,EACrB;AAEA,QAAM,oBAAoB,MAAM,KAAK,eAAe,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AAC/F,QAAM,oBAAoB,kBAAkB,SACzC,YAAY,kBAAkB,KAAK,IAAI,CAAC,0BACxC;AAEH,QAAM,kBAAkB,MAAM,KAAK,aAAa,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AAC3F,QAAM,kBAAkB,gBAAgB,SACrC,YAAY,gBAAgB,KAAK,IAAI,CAAC,qCACtC;AAEH,MAAI,aAAiC,CAAC,mBAAmB,eAAe,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,IAAI;AAClH,MAAI,CAAC,WAAW;AAAQ,iBAAa;AAErC,QAAM,SAAS,CAAC,YAAY,GAAG,QAAQ,GAAG,GAAG,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,MAAM;AAEzF,SAAO;AACR;;;AC3QA,IAAAC,2BAAiE;AAEjE,IAAM,YAAY,oBAAI,IAAY;AAClC,IAAMC,kBAAiB,oBAAI,IAAY;AACvC,UAAU,IAAI,SAAS;AAEvB,IAAMC,uBAAsB,CAAC,MAAc,WAAmB,WAAoB;AACjF,UAAQ,KAAK,YAAY,GAAG;AAAA,IAC3B,KAAK;AACJ,gBAAU,IAAI,QAAQ;AACtB,aAAO,WAAW,SAAS;AAAA,IAC5B,KAAK;AACJ,gBAAU,IAAI,SAAS;AACvB,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AAEJ,YAAM,IAAI,wCAAe,6DAA6D;AAAA,IACvF,KAAK;AACJ,gBAAU,IAAI,WAAW;AACzB,aAAO,cAAc,SAAS;AAAA,IAC/B,KAAK;AACJ,gBAAU,IAAI,SAAS;AACvB,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AACJ,gBAAU,IAAI,iBAAiB;AAC/B,aAAO,oBAAoB,SAAS;AAAA,IACrC,KAAK;AACJ,gBAAU,IAAI,OAAO;AACrB,aAAO,UAAU,SAAS;AAAA,IAC3B,KAAK;AACJ,UAAI,WAAW,iBAAiB;AAC/B,kBAAU,IAAI,QAAQ;AACtB,eAAO,WAAW,SAAS;AAAA,MAC5B;AAEA,gBAAU,IAAI,SAAS;AACvB,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AACJ,gBAAU,IAAI,MAAM;AACpB,aAAO,SAAS,SAAS;AAAA,IAC1B;AACC,aAAO;AAAA,EACT;AACD;AAEA,IAAMC,sBAAqB,CAAC,OAAmB,WAAmB;AACjE,MAAI,MAAM;AAAQ,aAAS,SAAS;AACpC,MAAI,MAAM;AAAY,aAAS,SAAS;AACxC,MAAI,MAAM;AAAM,aAAS,SAAS;AAClC,MAAI,MAAM;AAAU,aAAS,SAAS;AAEtC,MAAI,MAAM,SAAS;AAClB,UAAM,SAAS,MAAM;AAErB,YAAQ,OAAO,QAAQ;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,iBAAS,SAAS,YAAY,KAAK,UAAU,MAAM,CAAC;AACpD;AAAA,MACD,KAAK;AACJ,YAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,mBAAS,SAAS,aAAa,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AAC9E;AAAA,QACD;AAEA,cAAM,QAAQ;AAKd,YAAI,MAAM,SAAS,OAAO;AACzB,mBAAS,SAAS;AAClB;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,iBAAiB;AACnC;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,eAAe;AACjC,mBAAS,SAAS,iBAAiB,EAAE,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC;AAExD,UAAAF,gBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,YAAI,mBAAmB,KAAK,MAAM,IAAI,GAAG;AACxC,mBAAS,SAAS;AAElB,UAAAA,gBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,cAAM,cAAc,GAAG,MAAM,IAAI,GAChC,MAAM,KAAK,SACR,MAAM,MAAM,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,MACpD,MAAM,KAAK,SAAS,GAAG,IACvB,KACA,IACJ;AACA,cAAM,SAAS,QAAQ,EAAE,aAAa,GAAG,CAAC;AAE1C,QAAAA,gBAAe,IAAI,KAAK;AACxB,iBAAS,SAAS,YAAY,MAAM;AACpC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;AAEA,IAAMG,yBAAwB,CAC7B,UACwB;AACxB,QAAM,YAAY,EAAE,MAAM,UAAU,MAAM,IAAI;AAC9C,MAAI,SAAS,IAAK,MAAM,IAAI;AAE5B,MAAI,MAAM,SAAS,QAAQ;AAC1B,aAAS,SAAS,GAAG,MAAM,IAAI,KAAK,SAAS;AAAA,EAC9C,OAAO;AACN,UAAM,SAAS,OAAO,MAAM,YAAY,YAAY,CAAC,MAAM,QAAQ,MAAM,OAAO,IAC5E,MAAM,QAA6B,OACpC;AAEH,UAAM,cAAcF,qBAAoB,MAAM,MAAM,WAAW,MAAM;AACrE,QAAI,CAAC;AAAa,aAAO;AAEzB,aAAS,SAAS;AAAA,EACnB;AAEA,WAASC,oBAAmB,OAAO,MAAM;AAEzC,SAAO;AACR;AAEO,IAAM,mBAAmB,CAAC,YAA8B;AAC9D,QAAM,EAAE,QAAQ,MAAM,IAAI,QAAQ,KAAK;AACvC,QAAM,eAAe,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAEtD,QAAM,mBAAmB,wBAAwB,YAAY;AAE7D,QAAM,qBAAqB,CAAC,GAAG,cAAc,GAAG,gBAAgB;AAEhE,QAAM,UAAoB,CAAC;AAE3B,aAAW,cAAc,OAAO;AAC/B,QAAI,CAAC,WAAW,OAAO;AAAQ;AAC/B,UAAM,aAAa,EAAE,WAAW,UAAU,WAAW,IAAI;AAEzD,cAAU,IAAI,QAAQ;AAEtB,YAAQ;AAAA,MACP,gBAAgB,WAAW,IAAI,cAAc,UAAU,OACtD,WAAW,OAAO,IAAI,CAAC,MAAM,IAAI,EAAE,UAAU,EAAE,IAAI,GAAG,EAAE,KAAK,IAAI,CAClE;AAAA,IACD;AAAA,EACD;AAEA,QAAM,SAAmB,CAAC;AAC1B,QAAM,MAAgB,CAAC;AAEvB,aAAW,eAAe,oBAAoB;AAC7C,UAAM,cAAc,EAAE,YAAY,UAAU,YAAY,IAAI;AAE5D,UAAM,eAAe,OAAO;AAAA,MAC3B,YAAY,OACV,IAAI,CAAC,MAAM,CAAC,EAAE,MAAMC,uBAAsB,CAAC,CAAC,CAAC,EAC7C,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,MAAS;AAAA,IACnC;AAEA,UAAM,UAAoB,CAAC;AAE3B,UAAM,YAAY,YAAY,OAAO,OAAO,CAAC,UAAU,MAAM,oBAAoB,MAAM,kBAAkB;AACzG,UAAM,YAAY,UAAU,IAAwB,CAAC,UAAU;AAC9D,UAAI,CAAC,OAAO,oBAAoB;AAAQ,eAAO;AAE/C,YAAM,WAAW,EAAE,GAAG,YAAY,UAAU,YAAY,IAAI,IAAI,MAAM,UAAU,MAAM,IAAI,OAAO;AACjG,UAAI;AACJ,cAAQ,MAAM,kBAAkB;AAAA,QAC/B,KAAK;AAAA,QACL,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD;AACC,gBAAM,IAAI,wCAAe,qCAAqC,QAAQ,KAAK,MAAM,gBAAgB,EAAE;AAAA,MACrG;AAEA,gBAAU,IAAI,YAAY;AAE1B,aAAO,KAAM,QAAQ;AAAA,WAA+B,QAAQ;AAAA,cAC3D,MAAM,mBAAmB,IAAI,CAAC,QAAQ,GAAG,YAAY,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAC9E;AAAA,qBAA4B,MAAM,iBAAkB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,KAClG,gBAAgB,iBAAiB,cAAc;AAAA,eAAoB,YAAY,OAAO,EACvF;AAAA;AAAA,IACD,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS;AAEhC,YAAQ,KAAK,GAAG,SAAS;AAEzB,QAAI,YAAY,cAAc,QAAQ;AACrC,gBAAU,IAAI,aAAa;AAE3B,YAAM,UAAU,YAAY,cAAc,IAAI,CAAC,QAAQ;AACtD,cAAM,UAAU,EAAE,IAAI,QAAQ,GAAG,YAAY,IAAI,IAAI,IAAI,OAAO,KAAK,GAAG,CAAC,MAAM;AAG/E,eAAO,KACN,IAAI,OAAO,UAAU,GAAG,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,CAAC,aAC7D,mBAAmB,OAAO;AAAA,QAAe,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,MACtG,CAAC;AAED,cAAQ,KAAK,GAAG,OAAO;AAAA,IACxB;AAEA,QAAI,YAAY,YAAY;AAC3B,gBAAU,IAAI,YAAY;AAE1B,YAAM,KAAK,YAAY;AACvB,YAAM,SAAS,EAAE,GAAG,QAAQ,GAAG,YAAY,IAAI,MAAM;AAErD,YAAM,UAAU,KAAM,MAAM;AAAA,WAA+B,MAAM;AAAA,cAChE,GAAG,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC3D;AAAA;AAEA,cAAQ,KAAK,OAAO;AAAA,IACrB;AAEA,UAAM,QAAQ,gBAAgB,YAAY,IAAI,eAAe,WAAW;AAAA,EACvE,OAAO,OAAO,YAAY,EAAE,KAAK,KAAK,CACvC;AAAA,GAAM,QAAQ,SAAS,MAAM,YAAY,IAAI;AAAA,EAAY,QAAQ,KAAK,KAAK,CAAC;AAAA,MAAS,EAAE;AAEvF,WAAO,KAAK,KAAK;AAEjB,QAAI,CAAC,UAAU;AAAQ;AACvB,IAAAH,gBAAe,IAAI,WAAW;AAE9B,UAAM,eAAe,oBAAI,IAAY;AACrC,UAAM,YAAY,UAAU,IAAI,CAAC,UAAU;AAC1C,mBAAa,IAAI,MAAM,oBAAoB,SAAS,QAAQ,MAAM;AAClE,YAAM,UAAU,EAAE,MAAM,gBAAgB,EAAE;AAE1C,aAAO,IAAK,MAAM,IAAI,KACrB,MAAM,oBAAoB,SACvB,OAAO,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,aACpD,MAAM,mBAAmB,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC1E;AAAA,iBAAwB,MAAM,iBAAkB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,OACzF,QAAQ,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,IACxD;AAAA,IACD,CAAC,EAAE,KAAK,KAAK;AAEb,UAAM,YAAY,MAAM,KAAK,aAAa,OAAO,CAAC,EAAE,KAAK,IAAI;AAE7D,UAAM,cACL,gBAAgB,YAAY,IAAI,yBAAyB,YAAY,IAAI,QAAQ,SAAS;AAAA,EAAc,SAAS;AAAA;AAElH,QAAI,KAAK,WAAW;AAAA,EACrB;AAEA,QAAM,oBAAoB,MAAM,KAAKA,gBAAe,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AAC/F,QAAM,oBAAoB,kBAAkB,SACzC,YAAY,kBAAkB,KAAK,IAAI,CAAC,0BACxC;AAEH,QAAM,eAAe,MAAM,KAAK,UAAU,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AACrF,QAAM,eAAe,aAAa,SAC/B,YAAY,aAAa,KAAK,IAAI,CAAC,kCACnC;AAEH,MAAI,aAAiC,CAAC,mBAAmB,YAAY,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,IAAI;AAC/G,MAAI,CAAC,WAAW;AAAQ,iBAAa;AAErC,QAAM,SAAS,CAAC,YAAY,GAAG,SAAS,GAAG,QAAQ,GAAG,GAAG,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,MAAM;AAErG,SAAO;AACR;;;AC/RA,IAAAI,2BAAiE;AAEjE,IAAM,gBAAgB,oBAAI,IAAY,CAAC,aAAa,CAAC;AACrD,IAAMC,kBAAiB,oBAAI,IAAY,CAAC,CAAC;AAEzC,IAAMC,uBAAsB,CAAC,MAAc,cAAsB;AAChE,UAAQ,KAAK,YAAY,GAAG;AAAA,IAC3B,KAAK;AACJ,oBAAc,IAAI,KAAK;AACvB,aAAO,QAAQ,SAAS;AAAA,IACzB,KAAK;AACJ,oBAAc,IAAI,KAAK;AACvB,aAAO,QAAQ,SAAS;AAAA,IACzB,KAAK;AACJ,oBAAc,IAAI,MAAM;AACxB,aAAO,SAAS,SAAS;AAAA,IAC1B,KAAK;AACJ,oBAAc,IAAI,SAAS;AAC3B,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AACJ,oBAAc,IAAI,SAAS;AAC3B,aAAO,YAAY,SAAS;AAAA,IAC7B,KAAK;AACJ,oBAAc,IAAI,MAAM;AACxB,aAAO,SAAS,SAAS;AAAA,IAC1B,KAAK;AACJ,oBAAc,IAAI,MAAM;AACxB,aAAO,SAAS,SAAS;AAAA,IAC1B,KAAK;AACJ,oBAAc,IAAI,KAAK;AACvB,aAAO,QAAQ,SAAS;AAAA,IACzB,KAAK;AACJ,oBAAc,IAAI,MAAM;AACxB,aAAO,SAAS,SAAS;AAAA,IAC1B;AACC,aAAO;AAAA,EACT;AACD;AAEA,IAAMC,sBAAqB,CAAC,OAAmB,WAAmB;AACjE,MAAI,MAAM;AAAY,aAAS,SAAS;AACxC,MAAI,MAAM;AAAM,aAAS,SAAS;AAClC,MAAI,MAAM;AAAU,aAAS,SAAS;AAEtC,MAAI,MAAM,SAAS;AAClB,UAAM,SAAS,MAAM;AAErB,YAAQ,OAAO,QAAQ;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACJ,iBAAS,SAAS,YAAY,KAAK,UAAU,MAAM,CAAC;AACpD;AAAA,MACD,KAAK;AACJ,YAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,mBAAS,SAAS,aAAa,OAAO,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AAC9E;AAAA,QACD;AAEA,cAAM,QAAQ;AAKd,YAAI,MAAM,SAAS,OAAO;AACzB,mBAAS,SAAS;AAClB;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,iBAAiB;AACnC;AAAA,QACD;AAEA,YAAI,MAAM,SAAS,eAAe;AACjC,mBAAS,SAAS,iBAAiB,EAAE,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC;AAExD,UAAAF,gBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,YAAI,mBAAmB,KAAK,MAAM,IAAI,GAAG;AACxC,mBAAS,SAAS;AAElB,UAAAA,gBAAe,IAAI,KAAK;AACxB;AAAA,QACD;AAEA,cAAM,cAAc,GAAG,MAAM,IAAI,GAChC,MAAM,KAAK,SACR,MAAM,MAAM,KAAK,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,MACpD,MAAM,KAAK,SAAS,GAAG,IACvB,KACA,IACJ;AACA,cAAM,SAAS,QAAQ,EAAE,aAAa,GAAG,CAAC;AAE1C,QAAAA,gBAAe,IAAI,KAAK;AACxB,iBAAS,SAAS,YAAY,MAAM;AACpC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;AAEA,IAAMG,yBAAwB,CAC7B,UACwB;AACxB,QAAM,YAAY,EAAE,MAAM,UAAU,MAAM,IAAI;AAC9C,MAAI,SAAS,IAAK,MAAM,IAAI;AAE5B,QAAM,cAAcF,qBAAoB,MAAM,MAAM,SAAS;AAC7D,MAAI,CAAC;AAAa,WAAO;AAEzB,WAAS,SAAS;AAElB,WAASC,oBAAmB,OAAO,MAAM;AAEzC,SAAO;AACR;AAEO,IAAM,uBAAuB,CAAC,YAA8B;AAClE,QAAM,EAAE,OAAO,IAAI,QAAQ,KAAK;AAChC,QAAM,eAAe,KAAK,MAAM,KAAK,UAAU,MAAM,CAAC;AAEtD,QAAM,mBAAmB,wBAAwB,YAAY;AAE7D,QAAM,qBAAqB,CAAC,GAAG,cAAc,GAAG,gBAAgB;AAEhE,QAAM,SAAmB,CAAC;AAC1B,QAAM,MAAgB,CAAC;AAEvB,aAAW,eAAe,oBAAoB;AAC7C,UAAM,cAAc,EAAE,YAAY,UAAU,YAAY,IAAI;AAE5D,UAAM,eAAe,OAAO;AAAA,MAC3B,YAAY,OACV,IAAI,CAAC,MAAM,CAAC,EAAE,MAAMC,uBAAsB,CAAC,CAAC,CAAC,EAC7C,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,MAAS;AAAA,IACnC;AAEA,UAAM,UAAoB,CAAC;AAE3B,UAAM,YAAY,YAAY,OAAO,OAAO,CAAC,UAAU,MAAM,oBAAoB,MAAM,kBAAkB;AACzG,UAAM,YAAY,UAAU,IAAwB,CAAC,UAAU;AAC9D,UAAI,CAAC,OAAO,oBAAoB;AAAQ,eAAO;AAE/C,YAAM,WAAW,EAAE,GAAG,YAAY,UAAU,YAAY,IAAI,IAAI,MAAM,UAAU,MAAM,IAAI,OAAO;AACjG,UAAI;AACJ,cAAQ,MAAM,kBAAkB;AAAA,QAC/B,KAAK;AAAA,QACL,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD,KAAK;AACJ,yBAAe;AACf;AAAA,QACD;AACC,gBAAM,IAAI,wCAAe,qCAAqC,QAAQ,KAAK,MAAM,gBAAgB,EAAE;AAAA,MACrG;AAEA,oBAAc,IAAI,YAAY;AAE9B,aAAO,KAAM,QAAQ;AAAA,WAA+B,QAAQ;AAAA,cAC3D,MAAM,mBAAmB,IAAI,CAAC,QAAQ,GAAG,YAAY,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAC9E;AAAA,qBAA4B,MAAM,iBAAkB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,KAClG,gBAAgB,iBAAiB,cAAc;AAAA,eAAoB,YAAY,OAAO,EACvF;AAAA;AAAA,IACD,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS;AAEhC,YAAQ,KAAK,GAAG,SAAS;AAEzB,QAAI,YAAY,cAAc,QAAQ;AACrC,oBAAc,IAAI,aAAa;AAE/B,YAAM,UAAU,YAAY,cAAc,IAAI,CAAC,QAAQ;AACtD,cAAM,UAAU,EAAE,IAAI,QAAQ,GAAG,YAAY,IAAI,IAAI,IAAI,OAAO,KAAK,GAAG,CAAC,MAAM;AAG/E,eAAO,KACN,IAAI,OAAO,UAAU,GAAG,QAAQ,MAAM,GAAG,QAAQ,SAAS,CAAC,CAAC,aAC7D,mBAAmB,OAAO;AAAA,QAAe,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,MACtG,CAAC;AAED,cAAQ,KAAK,GAAG,OAAO;AAAA,IACxB;AAEA,QAAI,YAAY,YAAY;AAC3B,oBAAc,IAAI,YAAY;AAE9B,YAAM,KAAK,YAAY;AACvB,YAAM,SAAS,EAAE,GAAG,QAAQ,GAAG,YAAY,IAAI,MAAM;AAErD,YAAM,UAAU,KAAM,MAAM;AAAA,WAA+B,MAAM;AAAA,cAChE,GAAG,OAAO,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC3D;AAAA;AAEA,cAAQ,KAAK,OAAO;AAAA,IACrB;AAEA,UAAM,QAAQ,gBAAgB,YAAY,IAAI,mBAAmB,WAAW;AAAA,EAC3E,OAAO,OAAO,YAAY,EAAE,KAAK,KAAK,CACvC;AAAA,GAAM,QAAQ,SAAS,MAAM,YAAY,IAAI;AAAA,EAAY,QAAQ,KAAK,KAAK,CAAC;AAAA,MAAS,EAAE;AAEvF,WAAO,KAAK,KAAK;AAEjB,QAAI,CAAC,UAAU;AAAQ;AACvB,IAAAH,gBAAe,IAAI,WAAW;AAE9B,UAAM,eAAe,oBAAI,IAAY;AACrC,UAAM,YAAY,UAAU,IAAI,CAAC,UAAU;AAC1C,mBAAa,IAAI,MAAM,oBAAoB,SAAS,QAAQ,MAAM;AAClE,YAAM,UAAU,EAAE,MAAM,gBAAgB,EAAE;AAE1C,aAAO,IAAK,MAAM,IAAI,KACrB,MAAM,oBAAoB,SACvB,OAAO,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,aACpD,MAAM,mBAAmB,IAAI,CAAC,MAAM,GAAG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAC1E;AAAA,iBAAwB,MAAM,iBAAkB,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,OACzF,QAAQ,MAAM,IAAI;AAAA,mBAA2B,OAAO;AAAA,IACxD;AAAA,IACD,CAAC,EAAE,KAAK,KAAK;AAEb,UAAM,YAAY,MAAM,KAAK,aAAa,OAAO,CAAC,EAAE,KAAK,IAAI;AAE7D,UAAM,cACL,gBAAgB,YAAY,IAAI,yBAAyB,YAAY,IAAI,QAAQ,SAAS;AAAA,EAAc,SAAS;AAAA;AAElH,QAAI,KAAK,WAAW;AAAA,EACrB;AAEA,QAAM,oBAAoB,MAAM,KAAKA,gBAAe,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AAC/F,QAAM,oBAAoB,kBAAkB,SACzC,YAAY,kBAAkB,KAAK,IAAI,CAAC,0BACxC;AAEH,QAAM,mBAAmB,MAAM,KAAK,cAAc,OAAO,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,cAAc,CAAC,CAAC;AAC7F,QAAM,mBAAmB,iBAAiB,SACvC,YAAY,iBAAiB,KAAK,IAAI,CAAC,sCACvC;AAEH,MAAI,aAAiC,CAAC,mBAAmB,gBAAgB,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,IAAI;AACnH,MAAI,CAAC,WAAW;AAAQ,iBAAa;AAErC,QAAM,SAAS,CAAC,YAAY,GAAG,QAAQ,GAAG,GAAG,EAAE,OAAO,CAAC,MAAM,MAAM,MAAS,EAAE,KAAK,MAAM;AAEzF,SAAO;AACR;;;ACpQA,gBAAe;AACf,kBAAoB;AAEb,IAAM,iBAAiB,OAC7BI,OACA,YACI;AACJ,YAAAC,QAAG,UAAU,YAAAC,QAAQ,QAAQF,KAAI,GAAG;AAAA,IACnC,WAAW;AAAA,EACZ,CAAC;AAED,YAAAC,QAAG,cAAcD,OAAM,OAAO;AAC/B;;;ARJO,IAAM,gBAAY,2CAAiB;AAAA,EACzC,aAAa;AACZ,WAAO;AAAA,MACN;AAAA,MACA,eAAe;AAAA,MACf,YAAY;AAAA,IACb;AAAA,EACD;AAAA,EACA,YAAY,OAAO,YAAY;AAC9B,UAAM,SAAS,QAAQ,YAAY,CAAC,GAAG;AAEvC,QAAI;AAEJ,YAAQ,QAAQ;AAAA,MACf,KAAK;AAAA,MACL,KAAK,cAAc;AAClB,iBAAS,iBAAiB,OAAO;AAEjC;AAAA,MACD;AAAA,MAEA,KAAK,SAAS;AACb,iBAAS,oBAAoB,OAAO;AAEpC;AAAA,MACD;AAAA,MAEA,KAAK,UAAU;AACd,iBAAS,qBAAqB,OAAO;AAErC;AAAA,MACD;AAAA,MAEA,KAAK;AACJ,cAAM,IAAI,wCAAe,iFAAiF;AAAA,MAE3G;AACC,cAAM,IAAI;AAAA,UACT,wDAAwD,MAAM;AAAA;AAAA,QAC/D;AAAA,IACF;AAEA,UAAM,aAAa,aAAAG,QAAK;AAAA,MACvB,QAAQ,UAAU,QAAQ,UAAU,CAAC,CAAC,QAAQ,UAAU,QAAQ,aAC7D,QAAQ,IAAI,QAAQ,UAAU,OAAO,UAAW,KAAK,cACrD;AAAA,IACJ;AAEA,UAAM,aAAa,WAAW,SAAS,KAAK,IACzC,aACA,aAAAA,QAAK,KAAK,YAAY,YAAY;AAErC,mBAAe,YAAY,MAAM;AAAA,EAClC;AACD,CAAC;AAED,IAAO,cAAQ;","names":["import_generator_helper","import_path","import_generator_helper","drizzleImports","prismaToDrizzleType","addColumnModifiers","prismaToDrizzleColumn","import_generator_helper","drizzleImports","prismaToDrizzleType","addColumnModifiers","prismaToDrizzleColumn","path","fs","pathLib","path"]}
\ No newline at end of file
+{"version":3,"sources":["../src/index.ts","../src/globals/index.ts","../package.json","../src/util/escape/index.ts","../src/util/extract-many-to-many-models/index.ts","../src/util/generators/mysql.ts","../src/util/generators/pg.ts","../src/util/generators/sqlite.ts","../src/util/recursive-write/index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { defaultPath, generatorName } from '@/globals';\nimport { GeneratorError, generatorHandler } from '@prisma/generator-helper';\nimport path from 'path';\nimport { version } from '../package.json';\nimport { generateMySqlSchema, generatePgSchema, generateSQLiteSchema } from './util/generators';\nimport { recursiveWrite } from './util/recursive-write';\n\nexport const generator = generatorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tdefaultOutput: defaultPath,\n\t\t\tprettyName: generatorName,\n\t\t};\n\t},\n\tonGenerate: async (options) => {\n\t\tconst dbType = options.datasources[0]?.provider;\n\n\t\tlet output: string;\n\n\t\tswitch (dbType) {\n\t\t\tcase 'postgres':\n\t\t\tcase 'postgresql': {\n\t\t\t\toutput = generatePgSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'mysql': {\n\t\t\t\toutput = generateMySqlSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'sqlite': {\n\t\t\t\toutput = generateSQLiteSchema(options);\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase undefined:\n\t\t\t\tthrow new GeneratorError('Unable to determine database type.\\nMake sure datasource.provider is specified.');\n\n\t\t\tdefault:\n\t\t\t\tthrow new GeneratorError(\n\t\t\t\t\t`Invalid database type for Drizzle schema generation: ${dbType}.\\nSupported database types: PostgreSQL, MySQL, SQLite.`,\n\t\t\t\t);\n\t\t}\n\n\t\tconst folderPath = path.resolve(\n\t\t\toptions.generator.output?.value ?? (!!options.generator.output?.fromEnvVar\n\t\t\t\t? process.env[options.generator.output.fromEnvVar!] ?? defaultPath\n\t\t\t\t: defaultPath),\n\t\t);\n\n\t\tconst schemaPath = folderPath.endsWith('.ts')\n\t\t\t? folderPath\n\t\t\t: path.join(folderPath, '/schema.ts');\n\n\t\trecursiveWrite(schemaPath, output);\n\t},\n});\n\nexport default generator;\n","export const generatorName = 'Drizzle Prisma generator';\nexport const defaultPath = './src/drizzle/';\n","{\n\t\"name\": \"drizzle-prisma-generator\",\n\t\"author\": \"Drizzle Team\",\n\t\"version\": \"0.1.7\",\n\t\"description\": \"Generate Drizzle schema from Prisma schema\",\n\t\"scripts\": {\n\t\t\"run\": \"pnpm run build && cd ../prisma-testbench && npx prisma generate dev && code ./src/db/schema.ts\",\n\t\t\"build\": \"pnpm tsx scripts/build.ts\",\n\t\t\"b\": \"pnpm build\",\n\t\t\"pack\": \"(cd dist && npm pack --pack-destination ..) && rm -f package.tgz && mv *.tgz package.tgz\",\n\t\t\"publish\": \"npm publish package.tgz\",\n\t\t\"test\": \"vitest run\",\n\t\t\"lint\": \"dprint check --list-different\"\n\t},\n\t\"license\": \"Apache-2.0\",\n\t\"devDependencies\": {\n\t\t\"@arethetypeswrong/cli\": \"^0.15.3\",\n\t\t\"@types/node\": \"^20.12.7\",\n\t\t\"dprint\": \"^0.45.1\",\n\t\t\"prisma\": \"^6.0.0\",\n\t\t\"tsup\": \"^8.3.5\",\n\t\t\"tsx\": \"^4.19.2\",\n\t\t\"typescript\": \"^5.7.2\",\n\t\t\"zx\": \"^8.2.3\"\n\t},\n\t\"keywords\": [\n\t\t\"drizzle\",\n\t\t\"prisma\",\n\t\t\"orm\",\n\t\t\"pg\",\n\t\t\"mysql\",\n\t\t\"postgresql\",\n\t\t\"postgres\",\n\t\t\"sqlite\",\n\t\t\"database\",\n\t\t\"sql\",\n\t\t\"typescript\",\n\t\t\"ts\",\n\t\t\"schema\"\n\t],\n\t\"bin\": \"./index.js\",\n\t\"main\": \"./index.js\",\n\t\"sideEffects\": false,\n\t\"publishConfig\": {\n\t\t\"provenance\": true\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/drizzle-team/drizzle-prisma-generator.git\"\n\t},\n\t\"homepage\": \"https://github.com/drizzle-team/drizzle-prisma-generator\",\n\t\"dependencies\": {\n\t\t\"@prisma/generator-helper\": \"^6.0.0\"\n\t}\n}\n","export type StringContainer = \"'\" | '`' | '\"';\n\nconst backslashes = new RegExp(/\\\\/g);\n\nexport const s = (src: string, container: StringContainer = \"'\") =>\n\tsrc.replace(backslashes, '\\\\\\\\').replace(new RegExp(container, 'g'), `\\\\${container}`);\n","import type { DMMF } from '@prisma/generator-helper';\nimport { UnReadonlyDeep } from '../un-readonly-deep';\n\n/*\nCredit where credit is due:\n\nThis is heavily borrowed from prisma-kysely\nhttps://github.com/valtyr/prisma-kysely/blob/main/src/helpers/generateImplicitManyToManyModels.ts\n\nwhere it was heavily borrowed from prisma-dbml-generator\nhttps://github.com/notiz-dev/prisma-dbml-generator/blob/752f89cf40257a9698913294b38843ac742f8345/src/generator/many-to-many-tables.ts\n*/\n\nconst sorted = <T>(list: T[], sortFunction?: (a: T, b: T) => number) => {\n\tconst newList = [...list];\n\tnewList.sort(sortFunction);\n\treturn newList;\n};\n\nconst generateModels = (\n\tmanyToManyFields: DMMF.Field[],\n\tmodels: DMMF.Model[],\n\tmanyToManyTables: DMMF.Model[] = [],\n): DMMF.Model[] => {\n\tconst manyFirst = manyToManyFields.shift();\n\tif (!manyFirst) {\n\t\treturn manyToManyTables;\n\t}\n\n\tconst manySecond = manyToManyFields.find((field) => field.relationName === manyFirst.relationName);\n\n\tif (!manySecond) {\n\t\treturn manyToManyTables;\n\t}\n\n\tmanyToManyTables.push({\n\t\tdbName: `_${manyFirst.relationName}`,\n\t\tname: manyFirst.relationName || '',\n\t\tprimaryKey: null,\n\t\tuniqueFields: [],\n\t\tuniqueIndexes: [],\n\t\tfields: generateJoinFields([manyFirst, manySecond], models),\n\t});\n\n\treturn generateModels(\n\t\tmanyToManyFields.filter((field) => field.relationName !== manyFirst.relationName),\n\t\tmodels,\n\t\tmanyToManyTables,\n\t);\n};\n\nconst generateJoinFields = (fields: [DMMF.Field, DMMF.Field], models: DMMF.Model[]): DMMF.Field[] => {\n\tconst [A, B] = sorted(fields, (a, b) => a.type.localeCompare(b.type)) as UnReadonlyDeep<[DMMF.Field, DMMF.Field]>;\n\n\tconst aTableName = B.type;\n\tconst bTableName = A.type;\n\n\tconst manyTableName = `${A.type}To${B.type}`;\n\n\tA.isList = true;\n\tA.type = `${bTableName}To${aTableName}`;\n\tA.relationName = `${aTableName}To${manyTableName}`;\n\tA.relationFromFields = [];\n\tA.relationToFields = [];\n\n\tB.isList = true;\n\tB.type = `${bTableName}To${aTableName}`;\n\tB.relationName = `${bTableName}To${manyTableName}`;\n\tA.relationFromFields = [];\n\tA.relationToFields = [];\n\n\treturn [\n\t\t{\n\t\t\tname: `${aTableName}Id`,\n\t\t\tdbName: 'A',\n\t\t\ttype: getJoinIdType(aTableName, models),\n\t\t\tkind: 'scalar',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t},\n\t\t{\n\t\t\tname: aTableName,\n\t\t\ttype: aTableName,\n\t\t\tkind: 'object',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t\trelationName: `${aTableName}To${manyTableName}`,\n\t\t\trelationFromFields: [`${aTableName}Id`],\n\t\t\trelationToFields: [getJoinIdName(aTableName, models)],\n\t\t},\n\t\t{\n\t\t\tname: `${bTableName}Id`,\n\t\t\tdbName: 'B',\n\t\t\ttype: getJoinIdType(bTableName, models),\n\t\t\tkind: 'scalar',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t},\n\t\t{\n\t\t\tname: bTableName,\n\t\t\ttype: bTableName,\n\t\t\tkind: 'object',\n\t\t\tisRequired: true,\n\t\t\tisList: false,\n\t\t\tisUnique: false,\n\t\t\tisId: false,\n\t\t\tisReadOnly: true,\n\t\t\thasDefaultValue: false,\n\t\t\trelationName: `${bTableName}To${manyTableName}`,\n\t\t\trelationFromFields: [`${bTableName}Id`],\n\t\t\trelationToFields: [getJoinIdName(bTableName, models)],\n\t\t},\n\t];\n};\n\nconst getJoinIdType = (typeName: string, models: DMMF.Model[]): string => {\n\tconst joinedModel = models.find((m) => m.name === typeName);\n\tif (!joinedModel) {\n\t\tthrow new Error('Could not find referenced model of many-to-many relation');\n\t}\n\n\tconst idField = joinedModel.fields.find((f) => f.isId);\n\tif (!idField) throw new Error('No ID field on referenced model of many-to-many relation');\n\n\treturn idField.type;\n};\n\nconst getJoinIdName = (typeName: string, models: DMMF.Model[]): string => {\n\tconst joinedModel = models.find((m) => m.name === typeName);\n\tif (!joinedModel) {\n\t\tthrow new Error('Could not find referenced model of many-to-many relation');\n\t}\n\n\tconst idField = joinedModel.fields.find((f) => f.isId);\n\tif (!idField) throw new Error('No ID field on referenced model of many-to-many relation');\n\n\treturn idField.name;\n};\n\nconst filterManyToManyRelationFields = (models: DMMF.Model[]) => {\n\tconst fields = models.flatMap((model) => model.fields);\n\n\tconst relationFields = fields.filter(\n\t\t(field): field is DMMF.Field & Required<Pick<DMMF.Field, 'relationName'>> => !!field.relationName,\n\t);\n\n\tconst nonManyToManyRelationNames = relationFields\n\t\t.filter((field) => !field.isList)\n\t\t.map((field) => field.relationName);\n\n\tconst notManyToMany = new Set<string>(nonManyToManyRelationNames);\n\n\treturn relationFields.filter((field) => !notManyToMany.has(field.relationName));\n};\n\nexport const extractManyToManyModels = (models: DMMF.Model[]): DMMF.Model[] => {\n\tconst manyToManyFields = filterManyToManyRelationFields(models);\n\n\tif (!manyToManyFields.length) return [];\n\n\treturn generateModels(manyToManyFields, models, []);\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst mySqlImports = new Set<string>(['mysqlTable']);\nconst drizzleImports = new Set<string>([]);\n\nconst prismaToDrizzleType = (\n\ttype: string,\n\tcolDbName: string,\n\tprismaEnum?: UnReadonlyDeep<DMMF.DatamodelEnum>,\n\tnativeType?: MySQLNativeTypeMappings,\n\tnativeTypeAttributes?: readonly string[],\n) => {\n\tif (prismaEnum) {\n\t\tmySqlImports.add('mysqlEnum');\n\t\treturn `mysqlEnum('${colDbName}', [${prismaEnum.values.map((val) => `'${val.dbName ?? val.name}'`).join(', ')}])`;\n\t}\n\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tmySqlImports.add('bigint');\n\t\t\treturn `bigint('${colDbName}', { mode: 'bigint' })`;\n\t\tcase 'boolean':\n\t\t\tmySqlImports.add('boolean');\n\t\t\treturn `boolean('${colDbName}')`;\n\t\tcase 'bytes':\n\t\t\t// Drizzle doesn't support it yet...\n\t\t\tthrow new GeneratorError(\"Drizzle ORM doesn't support binary data type for MySQL\");\n\t\tcase 'datetime':\n\t\t\tif (nativeType === 'Time') {\n\t\t\t\tmySqlImports.add('time');\n\t\t\t\tconst precision = nativeTypeAttributes?.at(0) ?? '3';\n\n\t\t\t\treturn `time('${colDbName}', { precision: ${precision} })`;\n\t\t\t}\n\n\t\t\tmySqlImports.add('datetime');\n\t\t\treturn `datetime('${colDbName}', { fsp: 3 })`;\n\t\tcase 'decimal':\n\t\t\tmySqlImports.add('decimal');\n\t\t\treturn `decimal('${colDbName}', { precision: 65, scale: 30 })`;\n\t\tcase 'float':\n\t\t\tmySqlImports.add('double');\n\t\t\treturn `double('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tmySqlImports.add('json');\n\t\t\treturn `json('${colDbName}')`;\n\t\tcase 'int':\n\t\t\tmySqlImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tmySqlImports.add('varchar');\n\t\t\treturn `varchar('${colDbName}', { length: 191 })`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`CURRENT_TIMESTAMP\\`)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tcolumn = column + `.autoincrement()`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n\tenums: UnReadonlyDeep<DMMF.DatamodelEnum[]>,\n\tnativeType?: MySQLNativeTypeMappings,\n\tnativeTypeAttributes?: readonly string[],\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tconst drizzleType = prismaToDrizzleType(\n\t\tfield.type,\n\t\tcolDbName,\n\t\tfield.kind === 'enum' ? enums.find((e) => e.name === field.type)! : undefined,\n\t\tnativeType,\n\t\tnativeTypeAttributes,\n\t);\n\tif (!drizzleType) return undefined;\n\n\tcolumn = column + drizzleType;\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generateMySqlSchema = (options: GeneratorOptions) => {\n\tconst { models, enums } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((field) => {\n\t\t\t\t\tconst [nativeType, nativeTypeAttributes = []] = field.nativeType ?? [];\n\n\t\t\t\t\treturn [\n\t\t\t\t\t\tfield.name,\n\t\t\t\t\t\tprismaToDrizzleColumn(\n\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\tenums as UnReadonlyDeep<typeof enums>,\n\t\t\t\t\t\t\tnativeType as MySQLNativeTypeMappings | undefined,\n\t\t\t\t\t\t\tnativeTypeAttributes,\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t})\n\t\t\t\t.filter((field) => field.at(1) !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tmySqlImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tmySqlImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tmySqlImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\t\tconst table = `export const ${schemaTable.name} = mysqlTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst mySqlImportsArr = Array.from(mySqlImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst mySqlImportsStr = mySqlImportsArr.length\n\t\t? `import { ${mySqlImportsArr.join(', ')} } from 'drizzle-orm/mysql-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, mySqlImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\treturn [importsStr, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst pgImports = new Set<string>();\nconst drizzleImports = new Set<string>();\npgImports.add('pgTable');\n\nconst prismaToDrizzleType = (\n\ttype: string,\n\tcolDbName: string,\n\tdefVal?: string,\n\tnativeType?: PostgresNativeTypeMappings,\n\tnativeTypeAttributes?: readonly string[],\n) => {\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tpgImports.add('bigint');\n\t\t\treturn `bigint('${colDbName}', { mode: 'bigint' })`;\n\t\tcase 'boolean':\n\t\t\tpgImports.add('boolean');\n\t\t\treturn `boolean('${colDbName}')`;\n\t\tcase 'bytes':\n\t\t\t// Drizzle doesn't support it yet...\n\t\t\tthrow new GeneratorError(\"Drizzle ORM doesn't support binary data type for PostgreSQL\");\n\t\tcase 'datetime':\n\t\t\tif (nativeType === 'Date') {\n\t\t\t\tpgImports.add('date');\n\t\t\t\treturn `date('${colDbName}')`;\n\t\t\t}\n\t\t\tif (nativeType === 'Time') {\n\t\t\t\tpgImports.add('time');\n\t\t\t\tconst precision = nativeTypeAttributes?.[0] ?? '3';\n\t\t\t\treturn `time('${colDbName}', { precision: ${precision} })`;\n\t\t\t}\n\t\t\tif (nativeType === 'Timetz') {\n\t\t\t\tconst precision = nativeTypeAttributes?.[0] ?? '3';\n\t\t\t\treturn `time('${colDbName}', { precision: ${precision}, withTimezone: true })`;\n\t\t\t}\n\t\t\tif (nativeType === 'Timestamp') {\n\t\t\t\tpgImports.add('timestamp');\n\t\t\t\tconst precision = nativeTypeAttributes?.[0] ?? '3';\n\t\t\t\treturn `timestamp('${colDbName}', { precision: ${precision} })`;\n\t\t\t}\n\t\t\tif (nativeType === 'Timestamptz') {\n\t\t\t\tpgImports.add('timestamp');\n\t\t\t\tconst precision = nativeTypeAttributes?.[0] ?? '3';\n\t\t\t\treturn `timestamp('${colDbName}', { precision: ${precision}, withTimezone: true })`;\n\t\t\t}\n\t\t\t// Default to timestamp without time zone if no native type is specified\n\t\t\tpgImports.add('timestamp');\n\t\t\treturn `timestamp('${colDbName}', { precision: 3 })`;\n\t\tcase 'decimal':\n\t\t\tpgImports.add('decimal');\n\t\t\tconst precision = nativeTypeAttributes?.[0] ?? '65';\n\t\t\tconst scale = nativeTypeAttributes?.[1] ?? '30';\n\t\t\treturn `decimal('${colDbName}', { precision: ${precision}, scale: ${scale} })`;\n\t\tcase 'float':\n\t\t\tpgImports.add('doublePrecision');\n\t\t\treturn `doublePrecision('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tpgImports.add('jsonb');\n\t\t\treturn `jsonb('${colDbName}')`;\n\t\tcase 'int':\n\t\t\tif (defVal === 'autoincrement') {\n\t\t\t\tpgImports.add('serial');\n\t\t\t\treturn `serial('${colDbName}')`;\n\t\t\t}\n\n\t\t\tpgImports.add('integer');\n\t\t\treturn `integer('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tpgImports.add('text');\n\t\t\treturn `text('${colDbName}')`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isList) column = column + `.array()`;\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.defaultNow()`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n\tnativeType?: PostgresNativeTypeMappings,\n\tnativeTypeAttributes?: readonly string[],\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tif (field.kind === 'enum') {\n\t\tcolumn = column + `${field.type}('${colDbName}')`;\n\t} else {\n\t\tconst defVal = typeof field.default === 'object' && !Array.isArray(field.default)\n\t\t\t? (field.default as { name: string }).name\n\t\t\t: undefined;\n\n\t\tconst drizzleType = prismaToDrizzleType(\n\t\t\tfield.type,\n\t\t\tcolDbName,\n\t\t\tdefVal,\n\t\t\tnativeType,\n\t\t\tnativeTypeAttributes,\n\t\t);\n\t\tif (!drizzleType) return undefined;\n\n\t\tcolumn = column + drizzleType;\n\t}\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generatePgSchema = (options: GeneratorOptions) => {\n\tconst { models, enums } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst pgEnums: string[] = [];\n\n\tfor (const schemaEnum of enums) {\n\t\tif (!schemaEnum.values.length) continue;\n\t\tconst enumDbName = s(schemaEnum.dbName ?? schemaEnum.name);\n\n\t\tpgImports.add('pgEnum');\n\n\t\tpgEnums.push(\n\t\t\t`export const ${schemaEnum.name} = pgEnum('${enumDbName}', [${\n\t\t\t\tschemaEnum.values.map((e) => `'${e.dbName ?? e.name}'`).join(', ')\n\t\t\t}])`,\n\t\t);\n\t}\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((field) => {\n\t\t\t\t\tconst [nativeType, nativeTypeAttributes = []] = field.nativeType ?? [];\n\n\t\t\t\t\treturn [\n\t\t\t\t\t\tfield.name,\n\t\t\t\t\t\tprismaToDrizzleColumn(\n\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\tnativeType as PostgresNativeTypeMappings | undefined,\n\t\t\t\t\t\t\tnativeTypeAttributes,\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t})\n\t\t\t\t.filter((field) => field.at(1) !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tpgImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tpgImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tpgImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\n\t\tconst table = `export const ${schemaTable.name} = pgTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst pgImportsArr = Array.from(pgImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst pgImportsStr = pgImportsArr.length\n\t\t? `import { ${pgImportsArr.join(', ')} } from 'drizzle-orm/pg-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, pgImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\treturn [importsStr, ...pgEnums, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n};\n","import { s } from '@/util/escape';\nimport { extractManyToManyModels } from '@/util/extract-many-to-many-models';\nimport { UnReadonlyDeep } from '@/util/un-readonly-deep';\nimport { type DMMF, GeneratorError, type GeneratorOptions } from '@prisma/generator-helper';\n\nconst sqliteImports = new Set<string>(['sqliteTable']);\nconst drizzleImports = new Set<string>([]);\n\nconst prismaToDrizzleType = (type: string, colDbName: string) => {\n\tswitch (type.toLowerCase()) {\n\t\tcase 'bigint':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'boolean':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}', { mode: 'boolean' })`;\n\t\tcase 'bytes':\n\t\t\tsqliteImports.add('blob');\n\t\t\treturn `blob('${colDbName}', { mode: 'buffer' })`;\n\t\tcase 'datetime':\n\t\t\tsqliteImports.add('numeric');\n\t\t\treturn `numeric('${colDbName}')`;\n\t\tcase 'decimal':\n\t\t\tsqliteImports.add('numeric');\n\t\t\treturn `numeric('${colDbName}')`;\n\t\tcase 'float':\n\t\t\tsqliteImports.add('real');\n\t\t\treturn `real('${colDbName}')`;\n\t\tcase 'json':\n\t\t\tsqliteImports.add('text');\n\t\t\treturn `text('${colDbName}', { mode: 'json' })`;\n\t\tcase 'int':\n\t\t\tsqliteImports.add('int');\n\t\t\treturn `int('${colDbName}')`;\n\t\tcase 'string':\n\t\t\tsqliteImports.add('text');\n\t\t\treturn `text('${colDbName}')`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\nconst addColumnModifiers = (field: DMMF.Field, column: string) => {\n\tif (field.isRequired) column = column + `.notNull()`;\n\tif (field.isId) column = column + `.primaryKey()`;\n\tif (field.isUnique) column = column + `.unique()`;\n\n\tif (field.default) {\n\t\tconst defVal = field.default;\n\n\t\tswitch (typeof defVal) {\n\t\t\tcase 'number':\n\t\t\tcase 'string':\n\t\t\tcase 'symbol':\n\t\t\tcase 'boolean':\n\t\t\t\tcolumn = column + `.default(${JSON.stringify(defVal)})`;\n\t\t\t\tbreak;\n\t\t\tcase 'object':\n\t\t\t\tif (Array.isArray(defVal)) {\n\t\t\t\t\tcolumn = column + `.default([${defVal.map((e) => JSON.stringify(e)).join(', ')}])`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst value = defVal as {\n\t\t\t\t\tname: string;\n\t\t\t\t\targs: any[];\n\t\t\t\t};\n\n\t\t\t\tif (value.name === 'now') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`DATE('now')\\`)`;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'autoincrement') {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (value.name === 'dbgenerated') {\n\t\t\t\t\tcolumn = column + `.default(sql\\`${s(value.args[0], '`')}\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (/^uuid\\([0-9]*\\)$/.test(value.name)) {\n\t\t\t\t\tcolumn = column + `.default(sql\\`uuid()\\`)`;\n\n\t\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tconst stringified = `${value.name}${\n\t\t\t\t\tvalue.args.length\n\t\t\t\t\t\t? '(' + value.args.map((e) => String(e)).join(', ') + ')'\n\t\t\t\t\t\t: value.name.endsWith(')')\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: '()'\n\t\t\t\t}`;\n\t\t\t\tconst sequel = `sql\\`${s(stringified, '`')}\\``;\n\n\t\t\t\tdrizzleImports.add('sql');\n\t\t\t\tcolumn = column + `.default(${sequel})`;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn column;\n};\n\nconst prismaToDrizzleColumn = (\n\tfield: DMMF.Field,\n): string | undefined => {\n\tconst colDbName = s(field.dbName ?? field.name);\n\tlet column = `\\t${field.name}: `;\n\n\tconst drizzleType = prismaToDrizzleType(field.type, colDbName);\n\tif (!drizzleType) return undefined;\n\n\tcolumn = column + drizzleType;\n\n\tcolumn = addColumnModifiers(field, column);\n\n\treturn column;\n};\n\nexport const generateSQLiteSchema = (options: GeneratorOptions) => {\n\tconst { models } = options.dmmf.datamodel;\n\tconst clonedModels = JSON.parse(JSON.stringify(models)) as UnReadonlyDeep<DMMF.Model[]>;\n\n\tconst manyToManyModels = extractManyToManyModels(clonedModels);\n\n\tconst modelsWithImplicit = [...clonedModels, ...manyToManyModels] as DMMF.Model[];\n\n\tconst tables: string[] = [];\n\tconst rqb: string[] = [];\n\n\tfor (const schemaTable of modelsWithImplicit) {\n\t\tconst tableDbName = s(schemaTable.dbName ?? schemaTable.name);\n\n\t\tconst columnFields = Object.fromEntries(\n\t\t\tschemaTable.fields\n\t\t\t\t.map((e) => [e.name, prismaToDrizzleColumn(e)])\n\t\t\t\t.filter((e) => e[1] !== undefined),\n\t\t);\n\n\t\tconst indexes: string[] = [];\n\n\t\tconst relFields = schemaTable.fields.filter((field) => field.relationToFields && field.relationFromFields);\n\t\tconst relations = relFields.map<string | undefined>((field) => {\n\t\t\tif (!field?.relationFromFields?.length) return undefined;\n\n\t\t\tconst fkeyName = s(`${schemaTable.dbName ?? schemaTable.name}_${field.dbName ?? field.name}_fkey`);\n\t\t\tlet deleteAction: string;\n\t\t\tswitch (field.relationOnDelete) {\n\t\t\t\tcase undefined:\n\t\t\t\tcase 'Cascade':\n\t\t\t\t\tdeleteAction = 'cascade';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetNull':\n\t\t\t\t\tdeleteAction = 'set null';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SetDefault':\n\t\t\t\t\tdeleteAction = 'set default';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Restrict':\n\t\t\t\t\tdeleteAction = 'restrict';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NoAction':\n\t\t\t\t\tdeleteAction = 'no action';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new GeneratorError(`Unknown delete action on relation ${fkeyName}: ${field.relationOnDelete}`);\n\t\t\t}\n\n\t\t\tsqliteImports.add('foreignKey');\n\n\t\t\treturn `\\t'${fkeyName}': foreignKey({\\n\\t\\tname: '${fkeyName}',\\n\\t\\tcolumns: [${\n\t\t\t\tfield.relationFromFields.map((rel) => `${schemaTable.name}.${rel}`).join(', ')\n\t\t\t}],\\n\\t\\tforeignColumns: [${field.relationToFields!.map((rel) => `${field.type}.${rel}`).join(', ')}]\\n\\t})${\n\t\t\t\tdeleteAction && deleteAction !== 'no action' ? `\\n\\t\\t.onDelete('${deleteAction}')` : ''\n\t\t\t}\\n\\t\\t.onUpdate('cascade')`;\n\t\t}).filter((e) => e !== undefined) as string[];\n\n\t\tindexes.push(...relations);\n\n\t\tif (schemaTable.uniqueIndexes.length) {\n\t\t\tsqliteImports.add('uniqueIndex');\n\n\t\t\tconst uniques = schemaTable.uniqueIndexes.map((idx) => {\n\t\t\t\tconst idxName = s(idx.name ?? `${schemaTable.name}_${idx.fields.join('_')}_key`);\n\t\t\t\t// _key comes from Prisma, if their AI is to be trusted\n\n\t\t\t\treturn `\\t'${\n\t\t\t\t\tidx.name ? idxName : `${idxName.slice(0, idxName.length - 4)}_unique_idx`\n\t\t\t\t}': uniqueIndex('${idxName}')\\n\\t\\t.on(${idx.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')})`;\n\t\t\t});\n\n\t\t\tindexes.push(...uniques);\n\t\t}\n\n\t\tif (schemaTable.primaryKey) {\n\t\t\tsqliteImports.add('primaryKey');\n\n\t\t\tconst pk = schemaTable.primaryKey!;\n\t\t\tconst pkName = s(pk.name ?? `${schemaTable.name}_cpk`);\n\n\t\t\tconst pkField = `\\t'${pkName}': primaryKey({\\n\\t\\tname: '${pkName}',\\n\\t\\tcolumns: [${\n\t\t\t\tpk.fields.map((f) => `${schemaTable.name}.${f}`).join(', ')\n\t\t\t}]\\n\\t})`;\n\n\t\t\tindexes.push(pkField);\n\t\t}\n\n\t\tconst table = `export const ${schemaTable.name} = sqliteTable('${tableDbName}', {\\n${\n\t\t\tObject.values(columnFields).join(',\\n')\n\t\t}\\n}${indexes.length ? `, (${schemaTable.name}) => ({\\n${indexes.join(',\\n')}\\n})` : ''});`;\n\n\t\ttables.push(table);\n\n\t\tif (!relFields.length) continue;\n\t\tdrizzleImports.add('relations');\n\n\t\tconst relationArgs = new Set<string>();\n\t\tconst rqbFields = relFields.map((field) => {\n\t\t\trelationArgs.add(field.relationFromFields?.length ? 'one' : 'many');\n\t\t\tconst relName = s(field.relationName ?? '');\n\n\t\t\treturn `\\t${field.name}: ${\n\t\t\t\tfield.relationFromFields?.length\n\t\t\t\t\t? `one(${field.type}, {\\n\\t\\trelationName: '${relName}',\\n\\t\\tfields: [${\n\t\t\t\t\t\tfield.relationFromFields.map((e) => `${schemaTable.name}.${e}`).join(', ')\n\t\t\t\t\t}],\\n\\t\\treferences: [${field.relationToFields!.map((e) => `${field.type}.${e}`).join(', ')}]\\n\\t})`\n\t\t\t\t\t: `many(${field.type}, {\\n\\t\\trelationName: '${relName}'\\n\\t})`\n\t\t\t}`;\n\t\t}).join(',\\n');\n\n\t\tconst argString = Array.from(relationArgs.values()).join(', ');\n\n\t\tconst rqbRelation =\n\t\t\t`export const ${schemaTable.name}Relations = relations(${schemaTable.name}, ({ ${argString} }) => ({\\n${rqbFields}\\n}));`;\n\n\t\trqb.push(rqbRelation);\n\t}\n\n\tconst drizzleImportsArr = Array.from(drizzleImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst drizzleImportsStr = drizzleImportsArr.length\n\t\t? `import { ${drizzleImportsArr.join(', ')} } from 'drizzle-orm'`\n\t\t: undefined;\n\n\tconst sqliteImportsArr = Array.from(sqliteImports.values()).sort((a, b) => a.localeCompare(b));\n\tconst sqliteImportsStr = sqliteImportsArr.length\n\t\t? `import { ${sqliteImportsArr.join(', ')} } from 'drizzle-orm/sqlite-core'`\n\t\t: undefined;\n\n\tlet importsStr: string | undefined = [drizzleImportsStr, sqliteImportsStr].filter((e) => e !== undefined).join('\\n');\n\tif (!importsStr.length) importsStr = undefined;\n\n\tconst output = [importsStr, ...tables, ...rqb].filter((e) => e !== undefined).join('\\n\\n');\n\n\treturn output;\n};\n","import fs from 'fs';\nimport pathLib from 'path';\n\nexport const recursiveWrite = async (\n\tpath: string,\n\tcontent: string,\n) => {\n\tfs.mkdirSync(pathLib.dirname(path), {\n\t\trecursive: true,\n\t});\n\n\tfs.writeFileSync(path, content);\n};\n"],"mappings":"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","names":["import_generator_helper","import_path","import_generator_helper","drizzleImports","prismaToDrizzleType","precision","addColumnModifiers","prismaToDrizzleColumn","import_generator_helper","drizzleImports","prismaToDrizzleType","addColumnModifiers","prismaToDrizzleColumn","path","fs","pathLib","path"]}
\ No newline at end of file
